// Place your key bindings in this file to override the defaultsauto[]
[
	// explorer
	{
		"key": "r",
		"command": "renameFile",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "t",
		"command": "moveFileToTrash",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "d",
		"command": "explorer.newFile",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "n",
		"command": "fileutils.newFile",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "f",
		"command": "explorer.newFile",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "g",
		"command": "explorer.newFolder",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "s",
		"command": "fileutils.moveFile",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "e",
		"command": "workbench.action.focusFirstEditorGroup",
		"when": "explorerViewletVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "p",
		"command": "copyRelativeFilePath",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "c",
		"command": "filesExplorer.copy",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	{
		"key": "v",
		"command": "filesExplorer.paste",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	// workbench.action.focusFirstEditorGroup
	// moveFileToTrash, when: explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus,
	{
		"key": "enter",
		"command": "-renameFile",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
	},
	// {
	// 	"key": "cmd+d",
	// 	"command": "dictionary.google.translateSelected",
	// 	"when": "editorTextFocus"
	// },
	///////////////////////////////////////////
	// vim
	{
		"key": "/",
		"command": "editor.action.commentLine", // visual mode 인 경우 copy
		"when": "editorFocus && vim.active && !inDebugRepl && vim.mode == 'Visual'"
	},
	{
		"key": "tab",
		"command": "workbench.action.focusNextGroup",
		"when": "editorFocus && vim.active && !inDebugRepl && vim.mode == 'Normal'"
	},
	{
		"key": "cmd+[",
		"command": "workbench.action.navigateBack"
	},
	{
		"key": "cmd+]",
		"command": "workbench.action.navigateForward"
	},
	{
		"key": "cmd+k",
		"command": "git.commit",
		"when": "listFocus && scmProvider == git"
	},
	{
		"key": "cmd+shift+k",
		"command": "git.pushTo",
		"when": "listFocus && scmProvider == git"
	},
	{
		"key": "s",
		"command": "git.stage",
		"when": "listFocus && !inputFocus && scmProvider == git"
	},
	{
		"key": "u",
		"command": "git.unstage",
		"when": "listFocus && !inputFocus && scmProvider == git"
	},
	{
		"key": "c",
		"command": "git.commit",
		"when": "listFocus && !inputFocus && scmProvider == git"
	},
	{
		"key": "p",
		"command": "git.pushTo",
		"when": "listFocus && !inputFocus",
		"source": "user"
	},
	{
		"key": "u",
		"command": "git.pull",
		"when": "listFocus && !inputFocus && scmProvider == git"
	},
	{
		"key": "i",
		"command": "list.focusUp",
		"when": "listFocus && !inputFocus"
	},
	{
		"key": "k",
		"command": "list.focusDown",
		"when": "listFocus && !inputFocus"
	},
	{
		"key": "j",
		"command": "list.collapse",
		"when": "listFocus && !inputFocus"
	},
	{
		"key": "l",
		"command": "list.expand",
		"when": "listFocus && !inputFocus"
	},
	{
		"key": ",",
		"command": "search.focus.nextInputBox",
		"when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
	},
	{
		"key": "m",
		"command": "search.action.focusSearchFromResults",
		"when": "searchViewletVisible && listFocus && !inputFocus"
	},
	{
		"key": ",",
		"command": "workbench.scm.focus",
		"when": "scmRepository || isInDiffEditor"
	},
	{
		"key": "i",
		"command": "editor.action.diffReview.prev",
		"when": "isInDiffEditor"
	},
	{
		"key": "k",
		"command": "editor.action.diffReview.next",
		"when": "isInDiffEditor"
	},
	{
		"key": "cmd+l",
		"command": "cursorBottom",
		"when": "textInputFocus"
	},
	// {
	// 	"key": "shift+cmd+enter",
	// 	"command": "workbench.action.maximizeEditor"
	// },
	{
		"key": "shift+cmd+left",
		"command": "workbench.action.terminal.focusPreviousPane",
		"when": "terminalFocus"
	},
	{
		"key": "alt+cmd+up",
		"command": "-workbench.action.terminal.focusPreviousPane",
		"when": "terminalFocus"
	},
	{
		"key": "shift+cmd+right",
		"command": "workbench.action.terminal.focusNextPane",
		"when": "terminalFocus"
	},
	{
		"key": "alt+cmd+right",
		"command": "-workbench.action.terminal.focusNextPane",
		"when": "terminalFocus"
	},
	{
		"key": "cmd+k",
		"command": "workbench.action.terminal.focusNext",
		"when": "terminalFocus"
	},
	{
		"key": "cmd+i",
		"command": "workbench.action.terminal.focusPrevious",
		"when": "terminalFocus"
	},
	// editor
	{
		"key": "shift+space",
		"command": "editor.action.triggerSuggest",
		"when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
	},
	////////////////////////////////////////////////
	// calva
	{
		"key": "shift+tab",
		"command": "calva-fmt.formatCurrentForm",
		"when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && editorLangId == 'clojure'"
	},
	{
		"key": "tab",
		"command": "-calva-fmt.formatCurrentForm", // 자동완성과 중복되므로 명령 삭제
		"when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && editorLangId == 'clojure'"
	},
	{
		"key": "shift+escape",
		"command": "calva.clearInlineResults",
		"when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorHasSelection && !editorReadOnly && !hasOtherSuggestions && !parameterHintsVisible && !selectionAnchorSet && !suggestWidgetVisible && editorLangId == 'clojure'"
	},
	{
		"key": "escape",
		"command": "-calva.clearInlineResults",
		"when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorHasSelection && !editorReadOnly && !hasOtherSuggestions && !parameterHintsVisible && !selectionAnchorSet && !suggestWidgetVisible && editorLangId == 'clojure'"
	},
	{
		"key": "enter",
		"command": "calva.evaluateCurrentTopLevelForm",
		"when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && vim.mode != 'Insert'"
	},
	{
		"key": "cmd+enter",
		"command": "calva.evaluateEnclosingForm",
		"when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+alt+enter",
		"command": "calva.evaluateToCursor",
		"when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+alt+cmd+enter",
		"command": "calva.calva.evaluateToCursor",
		"when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && vim.mode == 'Insert'"
	},
	// === 작성중
	{
		"key": "shift+enter",
		"command": "calva.evaluateCurrentTopLevelForm",
		"when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && vim.mode == 'Insert'"
	},
	{
		"key": "shift+enter",
		"command": "calva.evaluateCurrentTopLevelForm",
		"when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && vim.mode == 'Normal'"
	},
	{
		"key": "ctrl+alt+cmd+right",
		"command": "calva.evaluateCurrentTopLevelForm",
		"when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && vim.mode == 'Insert'"
	},
	//edamagit
	{
		"key": "g g",
		"command": "cursorTop",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "g r",
		"command": "magit.refresh",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	// {
	// 	"key": "tab",
	// 	"command": "extension.vim_tab",
	// 	"when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
	// },
	// {
	// 	"key": "tab",
	// 	"command": "-extension.vim_tab",
	// 	"when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
	// },
	{
		"key": "x",
		"command": "magit.discard-at-point",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "k",
		"command": "-magit.discard-at-point"
	},
	{
		"key": "-",
		"command": "magit.reverse-at-point",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "v",
		"command": "-magit.reverse-at-point"
	},
	{
		"key": "shift+-",
		"command": "magit.reverting",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+v",
		"command": "-magit.reverting"
	},
	{
		"key": "shift+o",
		"command": "magit.resetting",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+x",
		"command": "-magit.resetting"
	},
	{
		"key": "x",
		"command": "-magit.reset-mixed"
	},
	{
		"key": "ctrl+u x",
		"command": "-magit.reset-hard"
	},
	{
		"key": "shift+i",
		"command": "magit.ignoring",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "i",
		"command": "-magit.ignoring",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "p",
		"command": "magit.pushing",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+p",
		"command": "-magit.pushing",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	// copilot
	{
		"key": "ctrl+shift+alt+cmd+enter",
		"command": "github.copilot.generate",
		"when": "editorTextFocus && github.copilot.activated"
	},
	{
		"key": "ctrl+enter",
		"command": "-github.copilot.generate",
		"when": "editorTextFocus && github.copilot.activated"
	},
	{
		"key": "ctrl+alt+cmd+right",
		"command": "paredit.slurpSexpForward",
		"when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
	},
	{
		"key": "ctrl+alt+right",
		"command": "-paredit.slurpSexpForward",
		"when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
	},
	{
		"key": "ctrl+alt+cmd+left",
		"command": "paredit.barfSexpForward",
		"when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
	},
	{
		"key": "ctrl+alt+left",
		"command": "-paredit.barfSexpForward",
		"when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
	},
	{
		"key": "ctrl+alt+'",
		"command": "calva.copyLastResults",
		"when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'"
	},
	{
		"key": "ctrl+alt+c ctrl+c",
		"command": "-calva.copyLastResults",
		"when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'"
	},
	{
		"key": "ctrl+alt+cmd+enter",
		"command": "calva.evaluateSelection",
		"when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && !suggestWidgetVisible && editorLangId == 'clojure'"
	},
	{
		"key": "ctrl+enter",
		"command": "-calva.evaluateSelection",
		"when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && !suggestWidgetVisible && editorLangId == 'clojure'"
	},
	// joyride
	{
		"key": "cmd+1",
		"command": "joyride.runWorkspaceScript",
		"args": "ignore_form.cljs"
	},
	{
		"key": "cmd+2",
		"command": "joyride.runWorkspaceScript",
		"args": "fontsize.cljs"
	},
	{
		"key": "cmd+3",
		"command": "joyride.runWorkspaceScript",
		"args": "example.cljs"
	},
	{
		"key": "cmd+alt+.",
		"command": "joyride.runWorkspaceScript"
	},
]
{
	"[clojure]": {
		"editor.autoClosingBrackets": "always",
		"editor.autoClosingOvertype": "always",
		"editor.defaultFormatter": "betterthantomorrow.calva",
		"editor.formatOnPaste": true
	},
	"[css]": {
		"editor.defaultFormatter": "vscode.css-language-features"
	},
	"[dart]": {
		"editor.formatOnSave": true,
		"editor.formatOnType": true,
		"editor.rulers": [
			80
		],
		"editor.selectionHighlight": false,
		"editor.suggest.snippetsPreventQuickSuggestions": false,
		"editor.suggestSelection": "first",
		"editor.tabCompletion": "onlySnippets",
		"editor.wordBasedSuggestions": false
	},
	"[json]": {
		"editor.defaultFormatter": "vscode.json-language-features"
	},
	"[jsonc]": {
		"editor.defaultFormatter": "vscode.json-language-features"
	},
	"[typescript]": {
		"editor.defaultFormatter": "vscode.typescript-language-features"
	},
	"asciidoc.enableErrorDiagnostics": false,
	"asciidoc.preview.breaks": true,
	"asciidoc.preview.refreshInterval": 1000,
	"asciidoc.use_kroki": true,
	"calva.customREPLCommandSnippets": [
		{
			"name": "go",
			"repl": "clj",
			"snippet": "(user/go)"
		},
		{
			"name": "reset",
			"repl": "clj",
			"snippet": "(user/reset)"
		},
		{
			"name": "reset-all",
			"repl": "clj",
			"snippet": "(user/reset-all)"
		}
	],
	"calva.fmt.configPath": "XX/.cljfmt.edn",
	// "calva.highlight.rainbowIndentGuides": true,
	// "calva.highlight.enableBracketColors": false,
	"calva.highlight": {
		"commentFormStyle": {
			"fontStyle": "italic"
		},
		"enableBracketColors": false,
		"matchedBracketStyle": {
			"backgroundColor": "#18EECE44" // "#777A"
		},
		"rainbowIndentGuides": true
	},
	"calva.jackInEnv": {},
	"calva.paredit.defaultKeyMap": "original",
	"calva.paredit.strictPreventUnmatchedClosingBracket": true,
	"calva.prettyPrintingOptions": {
		"printEngine": "pprint",
		"enabled": true,
		"width": 120,
		"maxLength": 50
	},
	"codestream.email": "jacegem@gmail.com",
	"css.validate": false,
	"dart.debugExternalLibraries": false,
	"dart.debugSdkLibraries": false,
	"dart.flutterHotReloadOnSave": "all",
	"dart.openDevTools": "flutter",
	"dart.previewFlutterUiGuides": true,
	"dart.previewFlutterUiGuidesCustomTracking": true,
	"dart.sdkPath": "~/sdk/flutter/bin/dart",
	"debug.allowBreakpointsEverywhere": true,
	// Causes the debug view to automatically appear when a breakpoint is hit. This
	// setting is global and not configurable per-language.
	"debug.openDebug": "openOnDebugBreak",
	"diffEditor.ignoreTrimWhitespace": false,
	"editor.accessibilitySupport": "off",
	"editor.bracketPairColorization.enabled": true,
	"editor.foldingMaximumRegions": 500,
	// "editor.fontFamily": "'Hack', 'D2Coding', 'SourceCodePro+Powerline+Awesome Regular', 'D2Coding', Menlo, Monaco, 'Courier New', monospace, FiraCode-Retina",
	"editor.fontFamily": "'Fira Code', 'Fira Code iScript',monospace, 'D2Coding ligature' ",
	"editor.fontLigatures": true,
	"editor.fontSize": 14.5,
	"editor.formatOnType": true,
	"editor.guides.bracketPairs": "active",
	"editor.inlineSuggest.enabled": true,
	"editor.insertSpaces": true,
	"editor.largeFileOptimizations": false,
	"editor.stickyScroll.enabled": true,
	"editor.tabSize": 2,
	"editor.semanticHighlighting.enabled": false,
	"editor.semanticTokenColorCustomizations": {
		// "enabled": false,
		"rules": {
			// "keyword": {
			// 	"foreground": "#3cc75a",
			// 	"bold": false,
			// 	"italic": false
			// },
			// "constant.keyword.clojure": {
			// 	"foreground": "#3cc75a"
			// },
			// "macro": {
			// 	"foreground": "#C88DA2",
			// 	"italic": true
			// },
			// "function": {
			// 	"foreground": "#27a69a",
			// },
		},
	},
	"editor.tokenColorCustomizations": {
		"[Noctis Minimus]": {
			//https://github.com/microsoft/vscode-textmate/blob/main/test-cases/themes/syntaxes/Clojure.tmLanguage
			"textMateRules": [
				{
					"name": "markdown list - not italic",
					"scope": [
						"markup.list.numbered.markdown meta.paragraph.markdown",
						"markup.list.unnumbered.markdown meta.paragraph.markdown"
					],
					"settings": {
						"fontStyle": ""
					}
				},
				{
					"name": "all keywords",
					"scope": [
						"constant.keyword.clojure",
					],
					"settings": {
						"foreground": "#3cc75a" //"#e282d2"
					}
				},
				{
					"name": "Odd-numbered keywords in map",
					"scope": [
						"meta.map.clojure constant.keyword.clojure", // keyword
						"meta.map.clojure meta.map.clojure meta.map.clojure constant.keyword.clojure", // keyword
						"meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure constant.keyword.clojure", // keyword
						"meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure constant.keyword.clojure", // keyword
					],
					"settings": {
						"foreground": "#DAD8D8" // "#F8B46C" //"#18EECE" // "#3dd645",
						// "fontStyle": "italic",
					}
				},
				{
					"name": "Even-numbered keywords in map",
					"scope": [
						"meta.map.clojure meta.map.clojure constant.keyword.clojure", // keyword
						"meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure constant.keyword.clojure", // keyword
						"meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure constant.keyword.clojure", // keyword
						"meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure meta.map.clojure constant.keyword.clojure", // keyword
					],
					"settings": {
						"foreground": "#FB78B5" // "#DAD8D8" // "#ced423",
						// "fontStyle": "italic",
					}
				},
				{
					"name": "ns, defn, def, let ...",
					"scope": [
						"meta.definition.global.clojure storage.control.clojure",
					],
					"settings": {
						"fontStyle": "italic",
					}
				},
				{
					"name": "namespace italic",
					"scope": [
						"entity.name.namespace.clojure"
					],
					"settings": {
						"fontStyle": "italic",
					}
				},
				{
					"name": "clojure function name",
					"scope": [
						"entity.global.clojure",
					],
					"settings": {
						"fontStyle": "bold",
						"foreground": "#27a69a",
					}
				},
			]
		}
	},
	"editor.matchBrackets": "never",
	"editor.unicodeHighlight.ambiguousCharacters": false,
	"files.autoSave": "afterDelay",
	"files.exclude": {
		"**/__pycache__": true,
		"**/.classpath": true,
		"**/.clj-kondo/.cache": true,
		"**/.cpcache": true,
		"**/.lsp/.cache": true,
		"**/.project": true,
		"**/.settings": true,
		"**/.factorypath": true
	},
	"files.watcherExclude": {
		"**/.clj-kondo/.cache/**": true,
		"**/.lsp/.cache/**": true,
		"**/target/classes/**": true
	},
	"files.insertFinalNewline": true,
	"files.trimFinalNewlines": true,
	"git.autofetch": true,
	"git.confirmSync": false,
	"git.enableSmartCommit": true,
	"git.ignoreRebaseWarning": true,
	"github.copilot.enable": {
		"*": true,
		"yaml": true,
		"plaintext": false,
		"markdown": true,
		"clojure": true,
		"lua": true,
		"css": false,
		"jsonc": false
	},
	"githubIssues.queries": [
		{
			"label": "My Issues",
			"query": "default"
		},
		{
			"label": "Created Issues",
			"query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
		}
	],
	"githubPullRequests.fileListLayout": "tree",
	"githubPullRequests.pullBranch": "never",
	"githubPullRequests.queries": [
		{
			"label": "Waiting For My Review",
			"query": "is:open review-requested:${user}"
		},
		{
			"label": "Assigned To Me",
			"query": "is:open assignee:${user}"
		},
		{
			"label": "Created By Me",
			"query": "is:open author:${user}"
		}
	],
	"githubPullRequests.terminalLinksHandler": "github",
	"hediet.vscode-drawio.codeLinkActivated": false,
	"hediet.vscode-drawio.theme": "automatic",
	"html.format.enable": false,
	"italicc.plugin.enabled": true,
	"javascript.format.enable": false,
	"javascript.updateImportsOnFileMove.enabled": "always",
	"jupyter.alwaysTrustNotebooks": true,
	"markdown.preview.breaks": true,
	"nebulaOni.update.restoreConfiguration": {
		"favoriteSettings": {
			"background": "Glacial Blue",
			"comments": "Dark Magenta",
			"favorite": "Nebula Oni (Pegasus)",
			"focusBorder": "ON",
			"fontStyle": "Italic",
			"highlight": "Ultra Violet",
			"main": "Sakura"
		},
		"themeSettings": {
			"background": "Grey",
			"comments": "Dark Violet",
			"favorite": "OFF",
			"focusBorder": "ON",
			"fontStyle": "Italic",
			"highlight": "Ultra Violet",
			"main": "Bumblebee"
		}
	},
	"notebook.cellToolbarLocation": {
		"default": "right",
		"jupyter-notebook": "left"
	},
	"prettier.configPath": "~/Library/Application Support/Code/User/.prettierrc",
	"python.analysis.completeFunctionParens": true,
	"python.analysis.diagnosticMode": "workspace",
	"python.analysis.indexing": true,
	"python.autoComplete.addBrackets": true,
	"python.languageServer": "Pylance",
	"python.terminal.activateEnvironment": false,
	"quarto.mathjax.theme": "dark",
	"redhat.telemetry.enabled": false,
	"tabnine.disable_file_regex": [
		"[.]md$",
		"[.]html$",
		"[.]css$",
		"[.]adoc$"
	],
	"tabnine.experimentalAutoImports": true,
	"terminal.integrated.defaultProfile.osx": "fish",
	"terminal.integrated.fontFamily": "'D2Coding ligature'",
	"terminal.integrated.fontSize": 13,
	"todo-tree.general.tags": [
		"BUG",
		"HACK",
		"FIXME",
		"TODO",
		"XXX",
		"[ ]",
		"[x]"
	],
	"todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^\\s*(-|\\d+.))\\s*($TAGS)",
	"todo-tree.tree.showScanModeButton": false,
	"typescript.inlayHints.parameterNames.enabled": "all",
	"vim.cursorStylePerMode.normal": "block-outline",
	"vim.disableAnnoyingNeovimMessage": true,
	"vim.easymotion": true,
	"vim.easymotionKeys": "hklyuiopnmqwertzxcvbasdgjf",
	// https://marketplace.visualstudio.com/items?itemName=vscodevim.vim
	// "vim.enableNeovim": true,
	"vim.handleKeys": {
		"<C-a>": false,
		"<C-f>": false
	},
	"vim.highlightedyank.duration": 200,
	"vim.highlightedyank.enable": true, // y로 복사하면 복사한 부분이 잠시 깜빡함.
	"vim.hlsearch": true,
	"vim.incsearch": true,
	"vim.insertModeKeyBindings": [
		{
			"after": [
				"<Esc>"
			],
			"before": [
				"ㅓ",
				"ㅓ"
			]
		},
		{
			"after": [
				"<Esc>"
			],
			"before": [
				"<Esc>"
			]
		}
		// {
		// 	"before": [
		// 		";",
		// 		"s"
		// 	],
		// 	"after": [
		// 		"(",
		// 		")",
		// 		"<left>"
		// 	]
		// }
	],
	"vim.insertModeKeyBindingsNonRecursive": [
		{
			"after": [
				"<Esc>"
			],
			"before": [
				"j",
				"j"
			]
		}
		// {
		// 	"before": [
		// 		"k",
		// 		"k"
		// 	],
		// 	"after": [
		// 		"<Esc>"
		// 	]
		// },
	],
	"vim.leader": "<space>",
	// "vim.neovimPath": "/usr/local/bin/nvim",
	// "vim.neovimPath": "/opt/homebrew/bin/nvim",
	"vim.normalModeKeyBindings": [
		//* a : action list
		{
			"before": [
				"<leader>",
				"a",
				"e"
			],
			"commands": [
				"workbench.view.explorer"
			]
		},
		{
			"before": [
				"<leader>",
				"a",
				"f"
			],
			"commands": [
				"workbench.action.findInFiles"
			]
		},
		{
			"before": [
				"<leader>",
				"a",
				"r"
			],
			"commands": [
				"clojureLsp.refactor.addMissingLibspec"
			]
		},
		{
			"before": [
				"<leader>",
				"a",
				"m"
			],
			"commands": [
				"clojureLsp.refactor.addMissingLibspec"
			]
		},
		{
			"before": [
				"<leader>",
				"a",
				"x"
			],
			"commands": [
				"workbench.view.extensions"
			]
		},
		{
			"before": [
				"<leader>",
				"b"
			],
			"commands": [
				"workbench.action.toggleSidebarVisibility"
			]
		},
		// calva
		{
			"before": [
				"<leader>",
				"c",
				"e"
			],
			"commands": [
				"calva.evaluateSelection"
			]
		},
		{
			"before": [
				"<leader>",
				"c",
				"h"
			],
			"commands": [
				"calva.clearReplHistory"
			]
		},
		// {
		// 	"before": ["<leader>", "d"],
		// 	"commands": ["workbench.view.debug"]
		{
			"before": [
				"<leader>",
				"d",
				"l"
			],
			"commands": [
				"paredit.killListForward"
			]
		},
		{
			"after": [
				"d",
				"s",
				"("
			],
			"before": [
				"<leader>",
				"d",
				"9"
			]
		},
		{
			"after": [
				"d",
				"s",
				")"
			],
			"before": [
				"<leader>",
				"d",
				"0"
			]
		},
		{
			"after": [
				"d",
				"s",
				"\""
			],
			"before": [
				"<leader>",
				"d",
				"'"
			]
		},
		{
			"after": [
				"d",
				"s",
				"["
			],
			"before": [
				"<leader>",
				"d",
				"["
			]
		},
		{
			"after": [
				"d",
				"s",
				"{"
			],
			"before": [
				"<leader>",
				"d",
				"]"
			]
		},
		{
			"before": [
				"<leader>",
				"d",
				"s"
			],
			"commands": [
				"paredit.spliceSexp"
			]
		},
		{
			"before": [
				"<leader>",
				"d",
				"f"
			],
			"commands": [
				"paredit.killSexpForward"
			]
		},
		{
			"before": [
				"<leader>",
				"d",
				"j"
			],
			"commands": [
				"paredit.splitSexp"
			]
		},
		{
			"before": [
				"<leader>",
				"e",
				"f"
			],
			"commands": [
				"clojureLsp.refactor.extractFunction"
			]
		},
		{
			"before": [
				"<leader>",
				"f",
				"a"
			],
			"commands": [
				"clojureLsp.refactor.threadFirstAll"
			]
		},
		{
			"before": [
				"<leader>",
				"f",
				"f"
			],
			"commands": [
				"actions.find"
			]
		},
		{
			"before": [
				"<leader>",
				"f",
				"m"
			],
			"commands": [
				"calva-fmt.alignCurrentForm"
			]
		},
		{
			"before": [
				"<leader>",
				"f",
				"l"
			],
			"commands": [
				"calva.loadFile"
			]
		},
		{
			"before": [
				"<leader>",
				"f",
				"t"
			],
			"commands": [
				"calva-fmt.trimCurrentFormWhiteSpace"
			]
		},
		{
			"before": [
				"<leader>",
				"h"
			],
			"commands": [
				"workbench.action.moveEditorToLeftGroup"
			]
		},
		{
			"before": [
				"<leader>",
				"i",
				"s"
			],
			"commands": [
				"clojureLsp.refactor.inlineSymbol"
			]
		},
		{
			"before": [
				"<leader>",
				"<leader>",
				"k"
			],
			"commands": [
				"bookmarks.list"
			]
		},
		{
			"before": [
				"<leader>",
				"k"
			],
			"commands": [
				"bookmarks.toggle"
			]
		},
		{
			"before": [
				"<leader>",
				"j"
			],
			"commands": [
				"bookmarks.jumpToPrevious"
			]
		},
		{
			"before": [
				"<leader>",
				"k",
				"l"
			],
			"commands": [
				"bookmarks.jumpToNext"
			]
		},
		{
			"before": [
				"<leader>",
				"k",
				"r"
			], // Kill Right
			"commands": [
				"paredit.killRight"
			]
		},
		{
			"before": [
				"<leader>",
				"k",
				"f"
			], // Kill Sexp Forward
			"commands": [
				"paredit.killSexpForward"
			]
		},
		{
			"before": [
				"<leader>",
				"k",
				"b"
			], // Kill Sexp Backward
			"commands": [
				"paredit.killSexpBackward"
			]
		},
		{
			"before": [
				"<leader>",
				"k",
				"l",
				"f"
			], // Kill List Forward
			"commands": [
				"paredit.killListForward"
			]
		},
		{
			"before": [
				"<leader>",
				"k",
				"l",
				"b"
			], // Kill List Backward
			"commands": [
				"paredit.killListBackward"
			]
		},
		{
			"before": [
				"<leader>",
				"l",
			],
			"commands": [
				"bookmarks.jumpToNext"
			]
		},
		{
			"before": [
				"<leader>",
				"l",
				"a"
			],
			"commands": [
				"clojureLsp.refactor.threadLastAll"
			]
		},
		{
			"before": [
				"<leader>",
				"l",
				"e"
			],
			"commands": [
				"clojureLsp.refactor.expandLet"
			]
		},
		{
			"before": [
				"<leader>",
				"l",
				"f"
			],
			"commands": [
				"calva.loadFile"
			]
		},
		{
			"before": [
				"<leader>",
				"l",
				"i"
			],
			"commands": [
				"clojureLsp.refactor.introduceLet"
			]
		},
		{
			"before": [
				"<leader>",
				"l",
				"p"
			],
			"commands": [
				"clojureLsp.refactor.moveToLet"
			]
		},
		{
			"before": [
				"<leader>",
				"l",
				"s"
			],
			"commands": [
				"paredit.splitSexp"
			]
		},
		{
			"before": [
				"<leader>",
				"l",
				"j"
			],
			"commands": [
				"paredit.joinSexp"
			]
		},
		{
			"before": [
				"<leader>",
				"m"
			],
			"commands": [
				"editor.action.toggleMinimap"
			]
		},
		{
			"before": [
				"<leader>",
				"m"
			],
			"commands": [
				"workbench.action.focusPreviousGroup"
			]
		},
		{
			"before": [
				"<leader>",
				"n"
			],
			"commands": [
				"extension.advancedNewFile"
			] // needs advancedNewFile extension / (opt + cmd + n)
		},
		{
			"before": [
				"<leader>",
				"o"
			],
			"commands": [
				"workbench.action.quickOpen"
			]
		},
		{
			"before": [
				"<leader>",
				"p"
			],
			"commands": [
				"workbench.action.showCommands"
			]
		},
		{
			"before": [
				"<leader>",
				"q"
			],
			"commands": [
				"workbench.action.closeActiveEditor"
			]
		},
		{
			"before": [
				"<leader>",
				"r",
				"c"
			],
			"commands": [
				"paredit.rewrapCurly"
			]
		},
		{
			"before": [
				"<leader>",
				"r",
				"q"
			],
			"commands": [
				"paredit.rewrapQuote"
			]
		},
		{
			"before": [
				"<leader>",
				"r",
				"p"
			],
			"commands": [
				"paredit.rewrapParens"
			]
		},
		{
			"before": [
				"<leader>",
				"r",
				"s"
			],
			"commands": [
				"paredit.rewrapSquare"
			]
		},
		{
			"before": [
				"<leader>",
				"r",
				"t"
			],
			"commands": [
				"calva.runAllTests"
			]
		},
		// {
		// 	"before": ["<leader>", "s"],
		// 	"commands": ["workbench.view.scm"]
		// },
		{
			"before": [
				"<leader>",
				"s",
				"e"
			],
			"commands": [
				"paredit.sexpRangeExpansion"
			]
		},
		{
			"before": [
				"<leader>",
				"s",
				"f"
			],
			"commands": [
				"paredit.selectForwardSexp",
				"execCopy",
				"extension.vim_escape"
			]
		},
		{
			"before": [
				"<leader>",
				"s",
				"s"
			],
			"commands": [
				"paredit.sexpRangeContraction"
			]
		},
		{
			"before": [
				"<leader>",
				"s",
				"t"
			],
			"commands": [
				"paredit.rangeForDefun"
			]
		},
		{
			"before": [
				"<leader>",
				"s",
				"r"
			],
			"commands": [
				"paredit.selectRight"
			]
		},
		{
			"before": [
				"<leader>",
				"s",
				"k",
				"f"
			],
			"commands": [
				"paredit.spliceSexpKillForward"
			]
		},
		{
			"before": [
				"<leader>",
				"s",
				"k",
				"b"
			],
			"commands": [
				"paredit.spliceSexpKillBackward"
			]
		},
		{
			"before": [
				"<leader>",
				"s",
				"x"
			],
			"commands": [
				"paredit.selectForwardSexp",
				"editor.action.clipboardCutAction",
				"extension.vim_escape"
			]
		},
		// {
		// 	"before": [
		// 		"<leader>",
		// 		"t",
		// 		"f"
		// 	],
		// 	"commands": [
		// 		"clojureLsp.refactor.threadFirst"
		// 	]
		// },
		// {
		// 	"before": [
		// 		"<leader>",
		// 		"t",
		// 		"l"
		// 	],
		// 	"commands": [
		// 		"clojureLsp.refactor.threadLast"
		// 	]
		// },
		// {
		// 	"before": [
		// 		"<leader>",
		// 		"t",
		// 		"p"
		// 	],
		// 	"commands": [
		// 		"clojureLsp.refactor.cyclePrivacy"
		// 	]
		// },
		{
			"before": [
				"<leader>",
				"u",
				"a"
			],
			"commands": [
				"clojureLsp.refactor.unwindAll"
			]
		},
		{
			"before": [
				"<leader>",
				"u",
				"t"
			],
			"commands": [
				"clojureLsp.refactor.unwindThread"
			]
		},
		{
			"before": [
				"<leader>",
				"u",
				"t"
			],
			"commands": [
				"clojureLsp.refactor.unwindThread"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"e"
			],
			"commands": [
				"workbench.view.explorer"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"j"
			],
			"commands": [
				"workbench.action.moveActiveEditorGroupLeft"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"l"
			],
			"commands": [
				"workbench.action.moveActiveEditorGroupRight"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"s"
			],
			"commands": [
				"workbench.action.splitEditor"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"p"
			],
			"commands": [
				"paredit.wrapAroundParens"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"s"
			],
			"commands": [
				"paredit.wrapAroundSquare"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"c"
			],
			"commands": [
				"paredit.wrapAroundCurly"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"q"
			],
			"commands": [
				"paredit.wrapAroundQuote"
			]
		},
		{
			"before": [
				"<leader>",
				"x"
			],
			"commands": [
				"workbench.action.closeActiveEditor"
			]
		},
		{
			"before": [
				"<leader>",
				"z"
			],
			"commands": [
				"workbench.action.toggleZenMode"
			]
		},
		// 	"before": ["<leader>", "s"],
		// 	"commands": ["magit.status"]
		// },
		{
			"before": [
				"<leader>",
				"."
			],
			"commands": [
				"workbench.action.quickFix"
			]
		},
		{
			"before": [
				"<leader>",
				";"
			],
			"commands": [
				"workbench.action.moveEditorToRightGroup"
			]
		},
		{
			"before": [
				"<leader>",
				","
			],
			"commands": [
				"workbench.action.focusNextGroup"
			]
		},
		{
			"after": [
				"y",
				"s",
				"i",
				"w",
				"\""
			],
			"before": [
				"<leader>",
				"'"
			]
		},
		{
			"after": [
				"y",
				"s",
				"i",
				"w",
				"("
			],
			"before": [
				"<leader>",
				"9"
			]
		},
		{
			"after": [
				"y",
				"s",
				"i",
				"w",
				"["
			],
			"before": [
				"<leader>",
				"["
			]
		},
		{
			"after": [
				"y",
				"s",
				"i",
				"w",
				"{"
			],
			"before": [
				"<leader>",
				"]"
			]
		},
		{
			"after": [
				"<leader>",
				"<leader>",
				"/"
			],
			// "commands": ["editor.action.commentLine"]
			"before": [
				"<leader>",
				"/"
			]
		}
	],
	"vim.normalModeKeyBindingsNonRecursive": [
		{
			"after": [
				"i"
			],
			"before": [
				"="
			]
		},
		{
			"before": [
				"."
			],
			"commands": [
				"editor.action.quickFix"
			]
		},
		{
			"before": [
				"c",
				"n"
			],
			"commands": [
				"clojureLsp.refactor.cleanNs"
			]
		},
		{
			"before": [
				"g",
				"c"
			],
			"commands": [
				"workbench.view.scm"
			]
		},
		{
			"before": [
				"g",
				"m"
			],
			"commands": [
				"magit.status"
			]
		},
		{
			"before": [
				"<S-r>"
			],
			"commands": [
				"editor.action.rename"
			]
		},
		{
			"before": [
				"s",
				"a"
			],
			"commands": [
				"clojureLsp.refactor.addMissingLibspec"
			]
		},
		{
			"before": [
				"s",
				"b"
			],
			"commands": [
				"paredit.barfSexpForward"
			]
		},
		{
			"before": [
				"s",
				"c"
			],
			"commands": [
				"paredit.selectForwardSexp",
				"execCopy",
				"extension.vim_escape"
			]
		},
		{
			"before": [
				"s",
				"k"
			],
			"commands": [
				"paredit.killListForward"
			]
		},
		{
			"before": [
				"s",
				"f"
			],
			"commands": [
				"paredit.slurpSexpForward"
			]
		},
		{
			"before": [
				"s",
				"g"
			],
			"commands": [
				"workbench.view.scm"
			]
		},
		{
			"before": [
				"s",
				"n"
			],
			"commands": [
				"clojureLsp.refactor.cleanNs"
			]
		},
		{
			"before": [
				"s",
				"r"
			],
			"commands": [
				"paredit.raiseSexp"
			]
		},
		{
			"before": [
				"b"
			],
			"commands": [
				"editor.action.revealDefinition"
			]
		},
		{
			"after": [
				"<leader>",
				"<leader>",
				"<leader>",
				"b",
				"d",
				"w" // Start of word
			],
			"before": [
				"f"
			]
		},
		{
			"after": [
				"<leader>",
				"<leader>",
				"<leader>",
				"j" // JumpToAnywhere motion;
			],
			"before": [
				"F"
			]
		},
		{
			"after": [
				"<C-r>"
			], // redo
			"before": [
				"U"
			]
		},
		{
			"before": [
				"["
			],
			"commands": [
				"workbench.action.navigateBack"
			]
		},
		{
			"before": [
				"]"
			],
			"commands": [
				"workbench.action.navigateForward"
			]
		},
		{
			"after": [
				"b"
			],
			"before": [
				"q"
			]
		},
		{
			"after": [
				"x"
			],
			"before": [
				"x"
			]
		},
		{
			"after": [
				"%"
			],
			"before": [
				"t"
			]
		},
		{
			"after": [
				"i"
			],
			"before": [
				"I"
			] // insert
		},
		{
			"after": [
				"i"
			],
			"before": [
				"o"
			] // insert
		},
		{
			"after": [
				"i"
			],
			"before": [
				"ㅐ"
			] // insert
		},
		{
			"after": [
				"o"
			],
			"before": [
				"O"
			] // insert new line
		},
		{
			"after": [
				"o"
			],
			"before": [
				"a"
			] // insert beginning cursor
		},
		{
			"after": [
				"<S-a>"
			],
			"before": [
				";"
			] // insert end cursor
		},
		{
			"after": [
				"k"
			],
			"before": [
				"i"
			] // up
		},
		{
			"after": [
				"k"
			],
			"before": [
				"ㅑ"
			] // up
		},
		{
			"after": [
				"j"
			],
			"before": [
				"k"
			] // down
		},
		{
			"after": [
				"h"
			],
			"before": [
				"j"
			] // left
		},
		{
			"after": [
				"<C-d>"
			],
			"before": [
				","
			] // page half down
		},
		{
			"after": [
				"m"
			], // n-> m (marker)
			"before": [
				"n"
			]
		},
		{
			"after": [
				"<C-u>"
			],
			"before": [
				"m"
			] // page half up
		},
		{
			"after": [
				"<C-f>"
			],
			"before": [
				"<"
			] // page down
		},
		{
			"after": [
				"<C-b>"
			],
			"before": [
				"M"
			] // page up
		},
		{
			"after": [
				"^"
			],
			"before": [
				"h"
			] // beginning of line
		},
		// {
		// 	"before": [";"], // end of line
		// 	"after": ["$"]
		// },
		{
			"before": [
				"s",
				"d"
			],
			"commands": [
				"paredit.spliceSexp"
			]
		},
		{
			"before": [
				"s",
				"x"
			],
			"commands": [
				"paredit.selectForwardSexp",
				"editor.action.clipboardCutAction",
				"extension.vim_escape"
			]
		},
		{
			"before": [
				"<leader>",
				"c",
				"j"
			],
			"commands": [
				"calva.jackIn"
			]
		},
		{
			"before": [
				"<leader>",
				"c",
				"i"
			],
			"commands": [
				"calva.clearInlineResults"
			]
		},
		{
			"before": [
				"<leader>",
				"t",
				"c"
			],
			"commands": [
				{
					"command": "calva.runCustomREPLCommand",
					"args": {
						"snippet": "(tap> (Throwable->map *e))"
					}
				}
			]
		},
		{
			"before": [
				"<leader>",
				"t",
				"s"
			],
			"commands": [
				{
					"command": "calva.loadFile"
				},
				{
					"command": "calva.runCustomREPLCommand",
					"args": {
						// "snippet": "(tap> (with-out-str (binding [clojure.test/*test-out* *out*] (clojure.test/test-vars [#'$top-level-defined-symbol]))))"
						"snippet": "(clojure.test/test-vars [#'$top-level-defined-symbol])"
					}
				}
			]
		},
		{
			"before": [
				"<leader>",
				"t",
				"t"
			],
			"commands": [
				{
					"command": "calva.loadFile"
				},
				{
					"command": "calva.runCustomREPLCommand",
					"args": {
						"snippet": "(run-tests)"
					}
				}
			]
		},
		{
			"before": [
				"<leader>",
				"t",
				"i"
			],
			"commands": [
				{
					"command": "calva.runCustomREPLCommand",
					"args": {
						"snippet": "(tap> (let [v (read-string (clojure.string/replace (read-line) \"*v\" \"@dev/*v\"))] (eval v)))"
					}
				}
			]
		},
		{
			"before": [
				"<leader>",
				"t",
				"l"
			],
			"commands": [
				{
					"command": "calva.runCustomREPLCommand",
					"args": {
						"snippet": "(tap> *1)"
					}
				}
			]
		},
		{
			"before": [
				"<leader>",
				"p",
				"o"
			],
			"commands": [
				{
					"command": "calva.runCustomREPLCommand",
					"args": {
						"snippet": "(require '[portal.api :as p]) (def p (p/open)) (add-tap #'p/submit)"
					}
				}
			]
		},
		{
			"after": [
				"<C-w>",
				"h"
			],
			"before": [
				"<C-w>",
				"j"
			] // left window
		},
		{
			"before": [
				"/"
			],
			"after": [
				"."
			]
		},
		// {
		// 	"before": [
		// 		"q"
		// 	], // left window
		// 	"commands": [
		// 		"workbench.action.previousEditorInGroup"
		// 		// "workbench.action.toggleWindowTabsBar"
		// 	]
		// 	// "after": ["<C-w>", "h"]
		// },
		{
			"before": [
				"<S-j>"
			], // left window
			"commands": [
				"workbench.action.previousEditorInGroup"
			]
			// "after": ["<C-w>", "h"]
		},
		{
			"before": [
				"<S-l>"
			], // right window
			"commands": [
				"workbench.action.nextEditorInGroup"
			]
			// "after": ["<C-w>", "l"],
		}
		// {
		// 	"before": ["<TAB>"], // next window
		// 	"after": ["<C-w>", "w"]
		// }
	],
	"vim.useCtrlKeys": true,
	"vim.useSystemClipboard": true,
	"vim.visualModeKeyBindingsNonRecursive": [
		{
			"before": [
				">"
			],
			"commands": [
				"editor.action.indentLines"
			]
		},
		{
			"before": [
				"<"
			],
			"commands": [
				"editor.action.outdentLines"
			]
		},
		{
			"after": [
				"%"
			],
			"before": [
				"t"
			]
		},
		{
			"after": [
				"k"
			],
			"before": [
				"i"
			] // up
		},
		{
			"after": [
				"j"
			],
			"before": [
				"k"
			] // down
		},
		{
			"after": [
				"h"
			],
			"before": [
				"j"
			] // left
		},
		{
			"after": [
				"<C-d>"
			],
			"before": [
				","
			] // page half down
			// paredit.forwardSexpOrUp 
			// paredit.backwardSexpOrUp
		},
		{
			"after": [
				"<C-u>"
			],
			"before": [
				"m"
			] // page half up
		},
		{
			"after": [
				"<C-f>"
			],
			"before": [
				"<"
			] // page down
		},
		{
			"after": [
				"<C-b>"
			],
			"before": [
				"M"
			] // page up
		},
		{
			"after": [
				"^"
			],
			"before": [
				"h"
			] // beginning of line
		},
		{
			"after": [
				"$"
			],
			"before": [
				";"
			] // end of line
		},
		{
			"after": [
				"S"
			],
			"before": [
				"s"
			]
		},
		{
			"before": [
				"/"
			],
			"commands": [
				"editor.action.commentLine"
			]
		},
	],
	"vim.visualstar": true,
	// https://neutrondev.com/vs-code-colored-bracket-pair-guides/
	"workbench.colorCustomizations": {
		"editorBracketPairGuide.activeBackground1": "#F8B46C",
		"editorBracketPairGuide.activeBackground2": "#FB78B5",
		"editorBracketPairGuide.activeBackground3": "#4AACFB",
		"editorBracketPairGuide.activeBackground4": "#B98BF5",
		"editorBracketPairGuide.activeBackground5": "#DAD8D8",
		"editorBracketPairGuide.activeBackground6": "#18EECE",
		"editorBracketPairGuide.background1": "#F8B46C",
		"editorBracketPairGuide.background2": "#FB78B5",
		"editorBracketPairGuide.background3": "#4AACFB",
		"editorBracketPairGuide.background4": "#B98BF5",
		"editorBracketPairGuide.background5": "#DAD8D8",
		"editorBracketPairGuide.background6": "#18EECE",
		// "calva.inlineErrorForegroundColor": "#ff0000",
		// "calva.inlineForegroundColor": "#ff9000",
		// "titleBar.activeBackground": "#71bb1e",
		// "titleBar.activeForeground": "#131722",
		// "titleBar.inactiveBackground": "#2a6e14d5",
		// "titleBar.inactiveForeground": "#ffffff99",
		// "activityBar.activeBackground": "#e0f3e0c0",
		// "activityBar.activeFocusBorder": "#ff0000",
		// "activityBar.activeBorder": "#ff0000",
		// "activityBar.background": "#01194eea",
		"tab.activeBorderTop": "#23a6c76c",
		"tab.activeBorder": "#39eff8",
		"tab.activeBackground": "#21618f55",
	},
	"workbench.colorTheme": "Noctis Minimus",
	"workbench.editor.highlightModifiedTabs": true,
	"workbench.editorAssociations": {
		"*.html": "default",
		"*.ipynb": "jupyter-notebook"
	},
	"workbench.iconTheme": "material-icon-theme",
	"workbench.tree.indent": 12,
	"diffEditor.maxComputationTime": 0,
	"markdown-preview-enhanced.liveUpdate": true,
	"markdown-preview-enhanced.previewTheme": "github-light.css",
	"calva.myCljAliases": [
		":portal",
		":add-libs",
		":reflect",
		":jedi-time"
	],
	"search.exclude": {
		"**/.calva/output-window/output.calva-repl": true
	},
	"editor.formatOnSave": true,
	"terminal.integrated.env.osx": {
		"FIG_NEW_SESSION": "1"
	},
	"cSpell.userWords": [
		"cond",
		"defn",
		"defresolver",
		"dissoc",
		"doall",
		"doseq",
		"farmmorning",
		"fnil",
		"gosura",
		"greenlabs",
		"hato",
		"honeysql",
		"jdbc",
		"kondo",
		"lacinia",
		"pmap",
		"sectime",
		"sinsun",
		"sinsunhi",
		"upcc",
		"upsert",
		"vals",
		"varchar",
		"walmartlabs"
	],
	"cSpell.enabledLanguageIds": [
		"asciidoc",
		"c",
		"cpp",
		"csharp",
		"css",
		"elixir",
		"erlang",
		"git-commit",
		"go",
		"graphql",
		"handlebars",
		"haskell",
		"html",
		"jade",
		"java",
		"javascript",
		"javascriptreact",
		"json",
		"jsonc",
		"jupyter",
		"latex",
		"less",
		"markdown",
		"php",
		"plaintext",
		"python",
		"pug",
		"restructuredtext",
		"rust",
		"scala",
		"scss",
		"scminput",
		"swift",
		"text",
		"typescript",
		"typescriptreact",
		"vue",
		"yaml",
		"yml",
		"clojure",
		"edn"
	],
	"git.pullBeforeCheckout": true,
	"[lua]": {
		"editor.defaultFormatter": "sumneko.lua"
	},
	"searchEverywhere.exclude": [
		"**/.git",
		"**/.svn",
		"**/.hg",
		"**/.CVS",
		"**/.DS_Store",
		"**/package-lock.json",
		"**/yarn.lock",
		"**/node_modules/**",
		"**/bower_components/**",
		"**/coverage/**",
		"**/.vscode/**",
		"**/.vscode-test/**",
		"**/.history/**",
		"**/.cache/**",
		"**/.cache-loader/**",
		"**/out/**",
		"**/dist/**",
		"**/altair/**"
	],
	"searchEverywhere.include": "**/*.{js,jsx,ts,tsx,clj,cljs,cljd,edn}",
	"git.openRepositoryInParentFolders": "never",
	"calva.enableClojureLspOnStart": "never",
}

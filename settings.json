{
	"terminal.integrated.fontFamily": "'D2Coding ligature'",
	"terminal.integrated.fontSize": 13,
	"terminal.integrated.defaultProfile.osx": "fish",
	"workbench.editor.highlightModifiedTabs": true,
	"editor.insertSpaces": true,
	"editor.fontSize": 14.5,
	// "editor.fontFamily": "'Hack', 'D2Coding', 'SourceCodePro+Powerline+Awesome Regular', 'D2Coding', Menlo, Monaco, 'Courier New', monospace, FiraCode-Retina",
	"editor.fontFamily": "Fira Code, monospace, 'D2Coding ligature' ",
	"editor.fontLigatures": true,
	"editor.accessibilitySupport": "off",
	"editor.largeFileOptimizations": false,
	"editor.inlineSuggest.enabled": true,
	"editor.formatOnType": true,
	// https://neutrondev.com/vs-code-colored-bracket-pair-guides/
	"workbench.colorCustomizations": {
		"editorBracketPairGuide.background1": "#F8B46C",
		"editorBracketPairGuide.background2": "#FB78B5",
		"editorBracketPairGuide.background3": "#4AACFB",
		"editorBracketPairGuide.background4": "#B98BF5",
		"editorBracketPairGuide.background5": "#DAD8D8",
		"editorBracketPairGuide.background6": "#18EECE",
		"editorBracketPairGuide.activeBackground1": "#F8B46C",
		"editorBracketPairGuide.activeBackground2": "#FB78B5",
		"editorBracketPairGuide.activeBackground3": "#4AACFB",
		"editorBracketPairGuide.activeBackground4": "#B98BF5",
		"editorBracketPairGuide.activeBackground5": "#DAD8D8",
		"editorBracketPairGuide.activeBackground6": "#18EECE",
	},
	"editor.guides.bracketPairs": "active",
	"editor.tokenColorCustomizations": {
		"textMateRules": [
			{
				"scope": [
					"comment",
					"comment.block",
					"comment.block.documentation",
					"comment.line",
					"constant",
					"constant.character",
					"constant.character.escape",
					"constant.numeric",
					"constant.numeric.integer",
					"constant.numeric.float",
					"constant.numeric.hex",
					"constant.numeric.octal",
					"constant.other",
					"constant.regexp",
					"constant.rgb-value",
					"emphasis",
					"entity",
					"entity.name",
					"entity.name.class",
					"entity.name.function",
					"entity.name.method",
					"entity.name.section",
					"entity.name.selector",
					"entity.name.tag",
					"entity.name.type",
					"entity.other",
					"entity.other.attribute-name",
					"entity.other.inherited-class",
					"invalid",
					"invalid.deprecated",
					"invalid.illegal",
					"keyword",
					"keyword.control",
					"keyword.operator",
					"keyword.operator.new",
					"keyword.operator.assignment",
					"keyword.operator.arithmetic",
					"keyword.operator.logical",
					"keyword.other",
					"markup",
					"markup.bold",
					"markup.changed",
					"markup.deleted",
					"markup.heading",
					"markup.inline.raw",
					"markup.inserted",
					"markup.italic",
					"markup.list",
					"markup.list.numbered",
					"markup.list.unnumbered",
					"markup.other",
					"markup.quote",
					"markup.raw",
					"markup.underline",
					"markup.underline.link",
					"meta",
					"meta.block",
					"meta.cast",
					"meta.class",
					"meta.function",
					"meta.function-call",
					"meta.preprocessor",
					"meta.return-type",
					"meta.selector",
					"meta.tag",
					"meta.type.annotation",
					"meta.type",
					"punctuation.definition.string.begin",
					"punctuation.definition.string.end",
					"punctuation.separator",
					"punctuation.separator.continuation",
					"punctuation.terminator",
					"storage",
					"storage.modifier",
					"storage.type",
					"string",
					"string.interpolated",
					"string.other",
					"string.quoted",
					"string.quoted.double",
					"string.quoted.other",
					"string.quoted.single",
					"string.quoted.triple",
					"string.regexp",
					"string.unquoted",
					"strong",
					"support",
					"support.class",
					"support.constant",
					"support.function",
					"support.other",
					"support.type",
					"support.type.property-name",
					"support.variable",
					"variable",
					"variable.language",
					"variable.name",
					"variable.other",
					"variable.other.readwrite",
					"variable.parameter"
				],
				"settings": {
					"fontStyle": ""
				}
			}
		]
	},
	"workbench.iconTheme": "material-icon-theme",
	"workbench.editorAssociations": {
		"*.ipynb": "jupyter-notebook",
		"*.html": "default"
	},
	"workbench.tree.indent": 12,
	"typescript.inlayHints.parameterNames.enabled": "all",
	"git.autofetch": true,
	"git.enableSmartCommit": true,
	"git.ignoreRebaseWarning": true,
	"git.confirmSync": false,
	"github.copilot.enable": {
		"*": true,
		"yaml": true,
		"plaintext": false,
		"markdown": true,
		"clojure": false
	},
	"githubPullRequests.fileListLayout": "tree",
	"githubIssues.queries": [
		{
			"label": "My Issues",
			"query": "default"
		},
		{
			"label": "Created Issues",
			"query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
		}
	],
	"githubPullRequests.queries": [
		{
			"label": "Waiting For My Review",
			"query": "is:open review-requested:${user}"
		},
		{
			"label": "Assigned To Me",
			"query": "is:open assignee:${user}"
		},
		{
			"label": "Created By Me",
			"query": "is:open author:${user}"
		}
	],
	"[html]": {
		"editor.defaultFormatter": "esbenp.prettier-vscode"
	},
	"[json]": {
		"editor.defaultFormatter": "vscode.json-language-features"
	},
	"[javascript]": {
		"editor.defaultFormatter": "esbenp.prettier-vscode"
	},
	"javascript.format.enable": false,
	"[jsonc]": {
		"editor.defaultFormatter": "vscode.json-language-features"
	},
	// Causes the debug view to automatically appear when a breakpoint is hit. This
	// setting is global and not configurable per-language.
	"debug.openDebug": "openOnDebugBreak",
	"dart.debugExternalLibraries": false,
	"dart.debugSdkLibraries": false,
	"dart.previewFlutterUiGuidesCustomTracking": true,
	"[dart]": {
		"editor.formatOnSave": true,
		"editor.formatOnType": true,
		"editor.rulers": [
			80
		],
		"editor.selectionHighlight": false,
		"editor.suggest.snippetsPreventQuickSuggestions": false,
		"editor.suggestSelection": "first",
		"editor.tabCompletion": "onlySnippets",
		"editor.wordBasedSuggestions": false
	},
	"dart.previewFlutterUiGuides": true,
	"files.autoSave": "afterDelay",
	"todo-tree.tree.showScanModeButton": false,
	"css.validate": false,
	"dart.sdkPath": "~/sdk/flutter/bin/dart",
	"debug.allowBreakpointsEverywhere": true,
	"todo-tree.general.tags": [
		"BUG",
		"HACK",
		"FIXME",
		"TODO",
		"XXX",
		"[ ]",
		"[x]"
	],
	"todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^\\s*(-|\\d+.))\\s*($TAGS)",
	"tabnine.experimentalAutoImports": true,
	"tabnine.disable_file_regex": [
		"[.]md$",
		"[.]html$",
		"[.]css$",
		"[.]adoc$"
	],
	"codestream.email": "jacegem@gmail.com",
	"jupyter.alwaysTrustNotebooks": true,
	"python.languageServer": "Pylance",
	"python.terminal.activateEnvironment": false,
	"python.autoComplete.addBrackets": true,
	"python.analysis.diagnosticMode": "workspace",
	"python.analysis.indexing": true,
	"hediet.vscode-drawio.local-storage": "eyIuZHJhd2lvLWNvbmZpZyI6IntcImxhbmd1YWdlXCI6XCJcIixcImN1c3RvbUZvbnRzXCI6W10sXCJsaWJyYXJpZXNcIjpcImdlbmVyYWxcIixcImN1c3RvbUxpYnJhcmllc1wiOltcIkwuc2NyYXRjaHBhZFwiXSxcInBsdWdpbnNcIjpbXSxcInJlY2VudENvbG9yc1wiOltdLFwiZm9ybWF0V2lkdGhcIjpcIjI0MFwiLFwiY3JlYXRlVGFyZ2V0XCI6ZmFsc2UsXCJwYWdlRm9ybWF0XCI6e1wieFwiOjAsXCJ5XCI6MCxcIndpZHRoXCI6ODI3LFwiaGVpZ2h0XCI6MTE2OX0sXCJzZWFyY2hcIjp0cnVlLFwic2hvd1N0YXJ0U2NyZWVuXCI6dHJ1ZSxcImdyaWRDb2xvclwiOlwiI2QwZDBkMFwiLFwiZGFya0dyaWRDb2xvclwiOlwiIzZlNmU2ZVwiLFwiYXV0b3NhdmVcIjp0cnVlLFwicmVzaXplSW1hZ2VzXCI6bnVsbCxcIm9wZW5Db3VudGVyXCI6MCxcInZlcnNpb25cIjoxOCxcInVuaXRcIjoxLFwiaXNSdWxlck9uXCI6ZmFsc2UsXCJ1aVwiOlwiXCJ9In0=",
	"notebook.cellToolbarLocation": {
		"default": "right",
		"jupyter-notebook": "left"
	},
	"[svelte]": {
		"editor.defaultFormatter": "svelte.svelte-vscode"
	},
	"[typescript]": {
		"editor.defaultFormatter": "vscode.typescript-language-features"
	},
	"files.exclude": {
		"**/__pycache__": true
	},
	"dart.openDevTools": "flutter",
	"calva.prettyPrintingOptions": {
		"enabled": true,
		"width": 120,
		"maxLength": 50,
		"printEngine": "pprint"
	},
	"[clojure]": {
		"editor.autoClosingBrackets": "always",
		"editor.autoClosingOvertype": "always",
		"editor.formatOnPaste": true,
		"editor.defaultFormatter": "betterthantomorrow.calva"
	},
	"prettier.configPath": "~/Library/Application Support/Code/User/.prettierrc",
	"javascript.updateImportsOnFileMove.enabled": "always",
	"asciidoc.preview.breaks": true,
	"html.format.enable": false,
	"asciidoc.enableErrorDiagnostics": false,
	"asciidoc.preview.refreshInterval": 1000,
	// https://marketplace.visualstudio.com/items?itemName=vscodevim.vim
	"vim.enableNeovim": true,
	// "vim.neovimPath": "/usr/local/bin/nvim",
	"vim.neovimPath": "/opt/homebrew/bin/nvim",
	"vim.disableAnnoyingNeovimMessage": true,
	"vim.easymotion": true,
	"vim.easymotionKeys": "hklyuiopnmqwertzxcvbasdgjf",
	"vim.incsearch": true,
	"vim.useSystemClipboard": true,
	"vim.highlightedyank.enable": true, // y로 복사하면 복사한 부분이 잠시 깜빡함.
	"vim.highlightedyank.duration": 200,
	"vim.useCtrlKeys": true,
	"vim.hlsearch": true,
	"vim.visualstar": true,
	"vim.leader": "<space>",
	"vim.handleKeys": {
		"<C-a>": false,
		"<C-f>": false
	},
	"vim.insertModeKeyBindings": [
		{
			"before": [
				"ㅓ",
				"ㅓ"
			],
			"after": [
				"<Esc>"
			]
		},
		{
			"before": [
				";",
				"s"
			],
			"after": [
				"(",
				")",
				"<left>"
			]
		}
	],
	"vim.insertModeKeyBindingsNonRecursive": [
		{
			"before": [
				"j",
				"j"
			],
			"after": [
				"<Esc>",
			]
		},
		{
			"before": [
				"k",
				"k"
			],
			"after": [
				"<Esc>",
			]
		},
	],
	"vim.visualModeKeyBindingsNonRecursive": [
		{
			"before": [
				">"
			],
			"commands": [
				"editor.action.indentLines"
			]
		},
		{
			"before": [
				"<"
			],
			"commands": [
				"editor.action.outdentLines"
			]
		},
		{
			"before": [
				"t"
			],
			"after": [
				"%"
			]
		},
		{
			"before": [
				"i"
			], // up
			"after": [
				"k"
			]
		},
		{
			"before": [
				"k"
			], // down
			"after": [
				"j"
			]
		},
		{
			"before": [
				"j"
			], // left
			"after": [
				"h"
			]
		},
		{
			"before": [
				","
			], // page half down
			"after": [
				"<C-d>"
			]
		},
		{
			"before": [
				"m"
			], // page half up
			"after": [
				"<C-u>"
			]
		},
		{
			"before": [
				"<"
			], // page down
			"after": [
				"<C-f>"
			]
		},
		{
			"before": [
				"M"
			], // page up
			"after": [
				"<C-b>"
			]
		},
		{
			"before": [
				"h"
			], // beginning of line
			"after": [
				"^"
			]
		},
		{
			"before": [
				";"
			], // end of line
			"after": [
				"$"
			]
		},
		{
			"before": [
				"s"
			],
			"after": [
				"S"
			]
		}
	],
	"vim.normalModeKeyBindings": [
		{
			"before": [
				"."
			],
			"commands": [
				"editor.action.quickFix"
			],
		},
		{
			"before": [
				"c",
				"n"
			],
			"commands": [
				"clojureLsp.refactor.cleanNs"
			],
		},
		{
			"before": [
				"s",
				"a"
			],
			"commands": [
				"clojureLsp.refactor.addMissingLibspec"
			],
		},
		{
			"before": [
				"s",
				"c"
			],
			"commands": [
				"paredit.selectForwardSexp",
				"execCopy",
				"extension.vim_escape"
			],
		},
		{
			"before": [
				"s",
				"f"
			],
			"commands": [
				"paredit.selectForwardSexp",
				"execCopy",
				"extension.vim_escape"
			],
		},
		{
			"before": [
				"s",
				"n"
			],
			"commands": [
				"clojureLsp.refactor.cleanNs"
			],
		},
		{
			"before": [
				"s",
				"s"
			],
			"commands": [
				"paredit.slurpSexpForward"
			],
		},
		{
			"before": [
				"b"
			],
			"commands": [
				"editor.action.revealDefinition"
			],
		},
		{
			"before": [
				"f"
			],
			"after": [
				"<leader>",
				"<leader>",
				"<leader>",
				"b",
				"d",
				"w"
			]
		},
		{
			"before": [
				"U"
			],
			"after": [
				"<C-r>"
			] // redo
		},
		{
			"before": [
				"["
			],
			"commands": [
				"workbench.action.navigateBack"
			]
		},
		{
			"before": [
				"]"
			],
			"commands": [
				"workbench.action.navigateForward"
			]
		},
		//* a : action list
		{
			"before": [
				"<leader>",
				"a",
				"e"
			],
			"commands": [
				"workbench.view.explorer"
			]
		},
		{
			"before": [
				"<leader>",
				"a",
				"f"
			],
			"commands": [
				"workbench.action.findInFiles"
			]
		},
		{
			"before": [
				"<leader>",
				"a",
				"r"
			],
			"commands": [
				"clojureLsp.refactor.addMissingLibspec"
			]
		},
		{
			"before": [
				"<leader>",
				"a",
				"m"
			],
			"commands": [
				"clojureLsp.refactor.addMissingLibspec"
			]
		},
		{
			"before": [
				"<leader>",
				"a",
				"x"
			],
			"commands": [
				"workbench.view.extensions"
			]
		},
		{
			"before": [
				"<leader>",
				"b"
			],
			"commands": [
				"workbench.action.toggleSidebarVisibility"
			]
		},
		// calva
		{
			"before": [
				"<leader>",
				"c",
				"j"
			],
			"commands": [
				"calva.jackIn"
			]
		},
		{
			"before": [
				"<leader>",
				"c",
				"e"
			],
			"commands": [
				"calva.evaluateSelection"
			]
		},
		{
			"before": [
				"<leader>",
				"c",
				"h"
			],
			"commands": [
				"calva.clearReplHistory"
			]
		},
		// {
		// 	"before": ["<leader>", "d"],
		// 	"commands": ["workbench.view.debug"]
		// },
		{
			"before": [
				"<leader>",
				"d",
				"s"
			],
			"commands": [
				"paredit.spliceSexp"
			]
		},
		{
			"before": [
				"<leader>",
				"d",
				"f"
			],
			"commands": [
				"paredit.killSexpForward"
			]
		},
		{
			"before": [
				"<leader>",
				"d",
				"j"
			],
			"commands": [
				"paredit.splitSexp"
			]
		},
		{
			"before": [
				"<leader>",
				"e",
				"f"
			],
			"commands": [
				"clojureLsp.refactor.extractFunction"
			]
		},
		{
			"before": [
				"<leader>",
				"f",
				"a"
			],
			"commands": [
				"clojureLsp.refactor.threadFirstAll"
			]
		},
		{
			"before": [
				"<leader>",
				"f",
				"f"
			],
			"commands": [
				"actions.find"
			]
		},
		{
			"before": [
				"<leader>",
				"f",
				"s"
			],
			"commands": [
				"gitflow.feature.start"
			]
		},
		{
			"before": [
				"<leader>",
				"f",
				"n"
			],
			"commands": [
				"gitflow.featureFinish"
			]
		},
		{
			"before": [
				"<leader>",
				"f",
				"t"
			],
			"commands": [
				"calva-fmt.trimCurrentFormWhiteSpace"
			]
		},
		{
			"before": [
				"<leader>",
				"h"
			],
			"commands": [
				"workbench.action.moveEditorToLeftGroup"
			]
		},
		{
			"before": [
				"<leader>",
				"i",
				"s"
			],
			"commands": [
				"clojureLsp.refactor.inlineSymbol"
			]
		},
		{
			"before": [
				"<leader>",
				"j"
			],
			"commands": [
				"workbench.action.previousEditorInGroup"
			]
		},
		{
			"before": [
				"<leader>",
				"k",
				"k"
			],
			"commands": [
				"bookmarks.toggle"
				// "editor.action.openLink"
			]
		},
		{
			"before": [
				"<leader>",
				"k",
				"j"
			],
			"commands": [
				"bookmarks.jumpToPrevious"
			]
		},
		{
			"before": [
				"<leader>",
				"k",
				"l"
			],
			"commands": [
				"bookmarks.jumpToNext"
			]
		},
		{
			"before": [
				"<leader>",
				"k",
				"r"
			], // Kill Right
			"commands": [
				"paredit.killRight"
			]
		},
		{
			"before": [
				"<leader>",
				"k",
				"f"
			], // Kill Sexp Forward
			"commands": [
				"paredit.killSexpForward"
			]
		},
		{
			"before": [
				"<leader>",
				"k",
				"b"
			], // Kill Sexp Backward
			"commands": [
				"paredit.killSexpBackward"
			]
		},
		{
			"before": [
				"<leader>",
				"k",
				"l",
				"f"
			], // Kill List Forward
			"commands": [
				"paredit.killListForward"
			]
		},
		{
			"before": [
				"<leader>",
				"k",
				"l",
				"b"
			], // Kill List Backward
			"commands": [
				"paredit.killListBackward"
			]
		},
		{
			"before": [
				"<leader>",
				"l",
				"a"
			],
			"commands": [
				"clojureLsp.refactor.threadLastAll"
			]
		},
		{
			"before": [
				"<leader>",
				"l",
				"e",
			],
			"commands": [
				"clojureLsp.refactor.expandLet"
			]
		},
		{
			"before": [
				"<leader>",
				"l",
				"i"
			],
			"commands": [
				"clojureLsp.refactor.introduceLet"
			]
		},
		{
			"before": [
				"<leader>",
				"l",
				"p"
			],
			"commands": [
				"clojureLsp.refactor.moveToLet"
			]
		},
		{
			"before": [
				"<leader>",
				"l",
				"s"
			],
			"commands": [
				"paredit.splitSexp"
			]
		},
		{
			"before": [
				"<leader>",
				"l",
				"j"
			],
			"commands": [
				"paredit.joinSexp"
			]
		},
		{
			"before": [
				"<leader>",
				"m"
			],
			"commands": [
				"editor.action.toggleMinimap"
			]
		},
		{
			"before": [
				"<leader>",
				"m"
			],
			"commands": [
				"workbench.action.focusPreviousGroup"
			]
		},
		{
			"before": [
				"<leader>",
				"n"
			],
			"commands": [
				"extension.advancedNewFile"
			] // needs advancedNewFile extension / (opt + cmd + n)
		},
		{
			"before": [
				"<leader>",
				"o"
			],
			"commands": [
				"workbench.action.quickOpen"
			]
		},
		{
			"before": [
				"<leader>",
				"p"
			],
			"commands": [
				"workbench.action.showCommands"
			]
		},
		{
			"before": [
				"<leader>",
				"q"
			],
			"commands": [
				"workbench.action.closeActiveEditor"
			]
		},
		{
			"before": [
				"<leader>",
				"r",
				"c"
			],
			"commands": [
				"paredit.rewrapCurly"
			]
		},
		{
			"before": [
				"<leader>",
				"r",
				"q"
			],
			"commands": [
				"paredit.rewrapQuote"
			]
		},
		{
			"before": [
				"<leader>",
				"r",
				"p"
			],
			"commands": [
				"paredit.rewrapParens"
			]
		},
		{
			"before": [
				"<leader>",
				"r",
				"s"
			],
			"commands": [
				"paredit.rewrapSquare"
			]
		},
		// {
		// 	"before": ["<leader>", "s"],
		// 	"commands": ["workbench.view.scm"]
		// },
		{
			"before": [
				"<leader>",
				"s",
				"e"
			],
			"commands": [
				"paredit.sexpRangeExpansion"
			]
		},
		{
			"before": [
				"<leader>",
				"s",
				"f"
			],
			"commands": [
				"paredit.selectForwardSexp",
				"execCopy",
				"extension.vim_escape"
			]
		},
		{
			"before": [
				"<leader>",
				"s",
				"s"
			],
			"commands": [
				"paredit.sexpRangeContraction"
			]
		},
		{
			"before": [
				"<leader>",
				"s",
				"t"
			],
			"commands": [
				"paredit.rangeForDefun"
			]
		},
		{
			"before": [
				"<leader>",
				"s",
				"r"
			],
			"commands": [
				"paredit.selectRight"
			]
		},
		{
			"before": [
				"<leader>",
				"s",
				"k",
				"f"
			],
			"commands": [
				"paredit.spliceSexpKillForward"
			]
		},
		{
			"before": [
				"<leader>",
				"s",
				"k",
				"b"
			],
			"commands": [
				"paredit.spliceSexpKillBackward"
			]
		},
		{
			"before": [
				"<leader>",
				"s",
				"x"
			],
			"commands": [
				"paredit.selectForwardSexp",
				"editor.action.clipboardCutAction",
				"extension.vim_escape"
			]
		},
		{
			"before": [
				"<leader>",
				"t",
				"f"
			],
			"commands": [
				"clojureLsp.refactor.threadFirst"
			]
		},
		{
			"before": [
				"<leader>",
				"t",
				"l"
			],
			"commands": [
				"clojureLsp.refactor.threadLast"
			]
		},
		{
			"before": [
				"<leader>",
				"t",
				"p"
			],
			"commands": [
				"clojureLsp.refactor.cyclePrivacy"
			]
		},
		{
			"before": [
				"<leader>",
				"u",
				"a"
			],
			"commands": [
				"clojureLsp.refactor.unwindAll"
			]
		},
		{
			"before": [
				"<leader>",
				"u",
				"t"
			],
			"commands": [
				"clojureLsp.refactor.unwindThread"
			]
		},
		{
			"before": [
				"<leader>",
				"u",
				"t"
			],
			"commands": [
				"clojureLsp.refactor.unwindThread"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"e"
			],
			"commands": [
				"workbench.view.explorer"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"j"
			],
			"commands": [
				"workbench.action.moveActiveEditorGroupLeft"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"l"
			],
			"commands": [
				"workbench.action.moveActiveEditorGroupRight"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"s"
			],
			"commands": [
				"workbench.action.splitEditor"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"p"
			],
			"commands": [
				"paredit.wrapAroundParens"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"s"
			],
			"commands": [
				"paredit.wrapAroundSquare"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"c"
			],
			"commands": [
				"paredit.wrapAroundCurly"
			]
		},
		{
			"before": [
				"<leader>",
				"w",
				"q"
			],
			"commands": [
				"paredit.wrapAroundQuote"
			]
		},
		{
			"before": [
				"<leader>",
				"x"
			],
			"commands": [
				"workbench.action.closeActiveEditor"
			]
		},
		{
			"before": [
				"<leader>",
				"z"
			],
			"commands": [
				"workbench.action.toggleZenMode"
			]
		},
		// 	"before": ["<leader>", "s"],
		// 	"commands": ["magit.status"]
		// },
		{
			"before": [
				"<leader>",
				"."
			],
			"commands": [
				"workbench.action.quickFix"
			]
		},
		{
			"before": [
				"<leader>",
				";"
			],
			"commands": [
				"workbench.action.moveEditorToRightGroup"
			]
		},
		{
			"before": [
				"<leader>",
				","
			],
			"commands": [
				"workbench.action.focusNextGroup"
			]
		},
		{
			"before": [
				"<leader>",
				"/"
			],
			"after": [
				"<leader>",
				"<leader>",
				"/"
			]
			// "commands": ["editor.action.commentLine"]
		}
		// {
		// 	"before": ["<leader>", "t"],
		// 	"commands": ["workbench.action.quickOpenNavigateNextInEditorPicker"]
		// },
	],
	"vim.normalModeKeyBindingsNonRecursive": [
		{
			"before": [
				"="
			],
			"after": [
				"i"
			]
		},
		{
			"before": [
				"x"
			],
			"after": [
				"x"
			]
		},
		{
			"before": [
				"t"
			],
			"after": [
				"%"
			]
		},
		{
			"before": [
				"I"
			], // insert
			"after": [
				"i"
			]
		},
		{
			"before": [
				"o"
			], // insert
			"after": [
				"i"
			]
		},
		{
			"before": [
				"ㅐ"
			], // insert
			"after": [
				"i"
			]
		},
		{
			"before": [
				"O"
			], // insert new line
			"after": [
				"o"
			]
		},
		{
			"before": [
				"a"
			], // insert beginning cursor
			"after": [
				"I"
			]
		},
		{
			"before": [
				";"
			], // insert end cursor
			"after": [
				"<S-a>"
			]
		},
		{
			"before": [
				"i"
			], // up
			"after": [
				"k"
			]
		},
		{
			"before": [
				"ㅑ"
			], // up
			"after": [
				"k"
			]
		},
		{
			"before": [
				"k"
			], // down
			"after": [
				"j"
			]
		},
		{
			"before": [
				"j"
			], // left
			"after": [
				"h"
			]
		},
		{
			"before": [
				","
			], // page half down
			"after": [
				"<C-d>"
			]
		},
		{
			"before": [
				"m"
			], // page half up
			"after": [
				"<C-u>"
			]
		},
		{
			"before": [
				"<"
			], // page down
			"after": [
				"<C-f>"
			]
		},
		{
			"before": [
				"M"
			], // page up
			"after": [
				"<C-b>"
			]
		},
		{
			"before": [
				"h"
			], // beginning of line
			"after": [
				"^"
			]
		},
		// {
		// 	"before": [";"], // end of line
		// 	"after": ["$"]
		// },
		{
			"before": [
				"s",
				"d"
			],
			"commands": [
				"paredit.selectForwardSexp",
				"editor.action.clipboardCutAction",
				"extension.vim_escape"
			]
		},
		{
			"before": [
				"s",
				"x"
			],
			"commands": [
				"paredit.selectForwardSexp",
				"editor.action.clipboardCutAction",
				"extension.vim_escape"
			]
		},
		// not work -> use hammersppon
		// {
		// "before": ["<S-w>"], // surround a word
		// 	"after": ["y", "s", "i", "w"]
		// },
		{
			"before": [
				"<C-w>",
				"j"
			], // left window
			"after": [
				"<C-w>",
				"h"
			]
		},
		{
			"before": [
				"<S-j>"
			], // left window
			"commands": [
				"workbench.action.previousEditorInGroup"
			]
			// "after": ["<C-w>", "h"]
		},
		{
			"before": [
				"<S-l>"
			], // right window
			"commands": [
				"workbench.action.nextEditorInGroup"
			]
			// "after": ["<C-w>", "l"],
		}
		// {
		// 	"before": ["<TAB>"], // next window
		// 	"after": ["<C-w>", "w"]
		// }
	],
	"editor.unicodeHighlight.ambiguousCharacters": false,
	"python.analysis.completeFunctionParens": true,
	"calva.paredit.defaultKeyMap": "original",
	"editor.formatOnSave": true,
	"nebulaOni.update.restoreConfiguration": {
		"themeSettings": {
			"background": "Grey",
			"main": "Bumblebee",
			"highlight": "Ultra Violet",
			"focusBorder": "ON",
			"fontStyle": "Italic",
			"comments": "Dark Violet",
			"favorite": "OFF"
		},
		"favoriteSettings": {
			"background": "Glacial Blue",
			"main": "Sakura",
			"highlight": "Ultra Violet",
			"focusBorder": "ON",
			"fontStyle": "Italic",
			"comments": "Dark Magenta",
			"favorite": "Nebula Oni (Pegasus)"
		}
	},
	"italicc.plugin.enabled": true,
	"workbench.colorTheme": "Noctis Minimus",
	"calva.paredit.strictPreventUnmatchedClosingBracket": true,
	"asciidoc.use_kroki": true,
	// "calva.highlight.rainbowIndentGuides": true,
	// "calva.highlight.enableBracketColors": false,
	"calva.highlight": {
		"enableBracketColors": false,
		"rainbowIndentGuides": true,
		"matchedBracketStyle": {
			"backgroundColor": "#18EECE44", // "#777A"
		},
		"commentFormStyle": {
			"fontStyle": "italic"
		}
	},
	"editor.bracketPairColorization.enabled": true,
	"redhat.telemetry.enabled": false,
	"editor.tabSize": 2,
	"diffEditor.ignoreTrimWhitespace": false,
	"dart.flutterHotReloadOnSave": "always",
}
{
	"terminal.integrated.fontFamily": "'SourceCodePro+Powerline+Awesome Regular', 'D2Coding', 'Inconsolata-g for Powerline'",
	"terminal.integrated.fontSize": 13,
	"terminal.integrated.defaultProfile.osx": "fish",
	"editor.insertSpaces": true,
	"editor.fontSize": 14.5,
	// "editor.fontFamily": "'Hack', 'D2Coding', 'SourceCodePro+Powerline+Awesome Regular', 'D2Coding', Menlo, Monaco, 'Courier New', monospace, FiraCode-Retina",
	"editor.fontFamily": "FiraCode-Retina, monospace",
	"editor.fontLigatures": true,
	"editor.accessibilitySupport": "off",
	"editor.largeFileOptimizations": false,
	"editor.inlineSuggest.enabled": true,
	"editor.formatOnSave": true,
	"editor.formatOnType": true,
	"editor.tabSize": 2,
	"editor.tokenColorCustomizations": {
		"textMateRules": [
			{
				"scope": [
					//following will be in italic
					"comment",
					"entity.name.type.class", //class names
					"constant", //String, Number, Boolean…, this, super
					"storage.modifier", //static keyword
					"storage.type.class.js", //class keyword
					"keyword" //import, export, return…
				],
				"settings": {
					"fontStyle": "italic"
				}
			},
			{
				"scope": [
					//following will be excluded from italics (VSCode has some defaults for italics)

					"invalid",
					"keyword.operator",
					"constant.numeric.css",
					"keyword.other.unit.px.css",
					"constant.numeric.decimal.js",
					"constant.numeric.json"
				],
				"settings": {
					"fontStyle": ""
				}
			}
		]
	},
	"workbench.iconTheme": "file-icons",
	"workbench.editorAssociations": {
		"*.ipynb": "jupyter-notebook"
	},
	"workbench.tree.indent": 12,
	"workbench.colorTheme": "Ayu Mirage Bordered",
	"git.autofetch": true,
	"git.enableSmartCommit": true,
	"git.ignoreRebaseWarning": true,
	"git.confirmSync": false,
	"github.copilot.enable": {
		"*": true,
		"yaml": true,
		"plaintext": false,
		"markdown": true
	},
	"githubPullRequests.fileListLayout": "tree",
	"githubIssues.queries": [
		{
			"label": "My Issues",
			"query": "default"
		},
		{
			"label": "Created Issues",
			"query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
		}
	],
	"githubPullRequests.queries": [
		{
			"label": "Waiting For My Review",
			"query": "is:open review-requested:${user}"
		},
		{
			"label": "Assigned To Me",
			"query": "is:open assignee:${user}"
		},
		{
			"label": "Created By Me",
			"query": "is:open author:${user}"
		}
	],

	"[html]": {
		"editor.defaultFormatter": "esbenp.prettier-vscode"
	},

	"[json]": {
		"editor.defaultFormatter": "vscode.json-language-features"
	},
	"[javascript]": {
		"editor.defaultFormatter": "esbenp.prettier-vscode"
	},
	"javascript.format.enable": false,

	"[jsonc]": {
		"editor.defaultFormatter": "esbenp.prettier-vscode"
	},
	// Causes the debug view to automatically appear when a breakpoint is hit. This
	// setting is global and not configurable per-language.
	"debug.openDebug": "openOnDebugBreak",
	"dart.debugExternalLibraries": false,
	"dart.debugSdkLibraries": false,
	"dart.previewFlutterUiGuidesCustomTracking": true,
	"[dart]": {
		// Automatically format code on save and during typing of certain characters
		// (like `;` and `}`).
		"editor.formatOnSave": true,
		"editor.formatOnType": true,
		// Draw a guide line at 80 characters, where Dart's formatting will wrap code.
		"editor.rulers": [80],
		// Disables built-in highlighting of words that match your selection. Without
		// this, all instances of the selected text will be highlighted, interfering
		// with Dart's ability to highlight only exact references to the selected variable.
		"editor.selectionHighlight": false,
		// By default, VS Code prevents code completion from popping open when in
		// "snippet mode" (editing placeholders in inserted code). Setting this option
		// to `false` stops that and allows completion to open as normal, as if you
		// weren't in a snippet placeholder.
		"editor.suggest.snippetsPreventQuickSuggestions": false,

		// By default, VS Code will pre-select the most recently used item from code
		// completion. This is usually not the most relevant item.
		//
		// "first" will always select top item
		// "recentlyUsedByPrefix" will filter the recently used items based on the
		//     text immediately preceding where completion was invoked.
		"editor.suggestSelection": "first",

		// Allows pressing <TAB> to complete snippets such as `for` even when the
		// completion list is not visible.
		"editor.tabCompletion": "onlySnippets",

		// By default, VS Code will populate code completion with words found in the
		// current file when a language service does not provide its own completions.
		// This results in code completion suggesting words when editing comments and
		// strings. This setting will prevent that.
		"editor.wordBasedSuggestions": false
	},

	"dart.previewFlutterUiGuides": true,
	"files.autoSave": "afterDelay",

	"todo-tree.tree.showScanModeButton": false,
	"css.validate": false,
	"dart.sdkPath": "~/sdk/flutter/bin/dart",
	"debug.allowBreakpointsEverywhere": true,
	"todo-tree.general.tags": [
		"BUG",
		"HACK",
		"FIXME",
		"TODO",
		"XXX",
		"[ ]",
		"[x]"
	],
	"todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^\\s*(-|\\d+.))\\s*($TAGS)",
	"tabnine.experimentalAutoImports": true,
	"tabnine.disable_file_regex": ["[.]md$", "[.]html$", "[.]css$", "[.]adoc$"],
	"codestream.email": "jacegem@gmail.com",
	"jupyter.alwaysTrustNotebooks": true,
	"python.languageServer": "Pylance",
	"python.terminal.activateEnvironment": false,
	"python.autoComplete.addBrackets": true,
	"python.analysis.completeFunctionParens": true,
	"python.analysis.diagnosticMode": "workspace",
	"hediet.vscode-drawio.local-storage": "eyIuZHJhd2lvLWNvbmZpZyI6IntcImxhbmd1YWdlXCI6XCJcIixcImN1c3RvbUZvbnRzXCI6W10sXCJsaWJyYXJpZXNcIjpcImdlbmVyYWxcIixcImN1c3RvbUxpYnJhcmllc1wiOltcIkwuc2NyYXRjaHBhZFwiXSxcInBsdWdpbnNcIjpbXSxcInJlY2VudENvbG9yc1wiOltdLFwiZm9ybWF0V2lkdGhcIjpcIjI0MFwiLFwiY3JlYXRlVGFyZ2V0XCI6ZmFsc2UsXCJwYWdlRm9ybWF0XCI6e1wieFwiOjAsXCJ5XCI6MCxcIndpZHRoXCI6ODI3LFwiaGVpZ2h0XCI6MTE2OX0sXCJzZWFyY2hcIjp0cnVlLFwic2hvd1N0YXJ0U2NyZWVuXCI6dHJ1ZSxcImdyaWRDb2xvclwiOlwiI2QwZDBkMFwiLFwiZGFya0dyaWRDb2xvclwiOlwiIzZlNmU2ZVwiLFwiYXV0b3NhdmVcIjp0cnVlLFwicmVzaXplSW1hZ2VzXCI6bnVsbCxcIm9wZW5Db3VudGVyXCI6MCxcInZlcnNpb25cIjoxOCxcInVuaXRcIjoxLFwiaXNSdWxlck9uXCI6ZmFsc2UsXCJ1aVwiOlwiXCJ9In0=",
	"notebook.cellToolbarLocation": {
		"default": "right",
		"jupyter-notebook": "left"
	},
	"[svelte]": {
		"editor.defaultFormatter": "svelte.svelte-vscode"
	},
	"[typescript]": {
		"editor.defaultFormatter": "vscode.typescript-language-features"
	},
	"files.exclude": {
		"**/__pycache__": true
	},
	"dart.openDevTools": "flutter",
	"calva.prettyPrintingOptions": {
		"enabled": true,
		"width": 120,
		"maxLength": 50,
		"printEngine": "pprint"
	},
	"[clojure]": {
		"editor.autoClosingBrackets": "always",
		"editor.autoClosingOvertype": "always",
		"editor.formatOnPaste": true
	},
	"prettier.configPath": "~/Library/Application Support/Code/User/.prettierrc",
	"javascript.updateImportsOnFileMove.enabled": "always",
	// https://marketplace.visualstudio.com/items?itemName=vscodevim.vim
	"vim.easymotion": true,
	"vim.easymotionKeys": "hklyuiopnmqwertzxcvbasdgjf",
	"vim.incsearch": true,
	"vim.useSystemClipboard": true,
	"vim.highlightedyank.enable": true, // y로 복사하면 복사한 부분이 잠시 깜빡함.
	"vim.highlightedyank.duration": 500,
	"vim.useCtrlKeys": true,
	"vim.hlsearch": true,
	"vim.visualstar": true,
	"vim.leader": "<space>",
	"vim.handleKeys": {
		"<C-a>": false,
		"<C-f>": false
	},
	"vim.insertModeKeyBindings": [
		{
			"before": ["ㅓ", "ㅓ"],
			"after": ["<Esc>"]
		}
	],
	"vim.insertModeKeyBindingsNonRecursive": [
		{
			"before": ["j", "j"],
			"after": ["<Esc>"]
		}
	],
	"vim.visualModeKeyBindingsNonRecursive": [
		{
			"before": [">"],
			"commands": ["editor.action.indentLines"]
		},
		{
			"before": ["<"],
			"commands": ["editor.action.outdentLines"]
		},
		{
			"before": ["i"], // up
			"after": ["k"]
		},
		{
			"before": ["k"], // down
			"after": ["j"]
		},
		{
			"before": ["j"], // left
			"after": ["h"]
		},
		{
			"before": [","], // page half down
			"after": ["<C-d>"]
		},
		{
			"before": ["m"], // page half up
			"after": ["<C-u>"]
		},
		{
			"before": ["<"], // page down
			"after": ["<C-f>"]
		},
		{
			"before": ["M"], // page up
			"after": ["<C-b>"]
		},
		{
			"before": ["h"], // beginning of line
			"after": ["^"]
		},
		{
			"before": [";"], // end of line
			"after": ["$"]
		},
		{
			"before": ["s"],
			"after": ["S"]
		}
	],
	"vim.normalModeKeyBindings": [
		{
			"before": ["f"],
			"after": ["<leader>", "<leader>", "<leader>", "b", "d", "w"]
		},
		{
			"before": ["U"],
			"after": ["<C-r>"] // redo
		},
		{
			"before": ["["],
			"commands": ["workbench.action.navigateBack"]
		},
		{
			"before": ["]"],
			"commands": ["workbench.action.navigateForward"]
		},
		//* a : action list
		{
			"before": ["<leader>", "a", "e"],
			"commands": ["workbench.view.explorer"]
		},
		{
			"before": ["<leader>", "a", "f"],
			"commands": ["workbench.action.findInFiles"]
		},
		{
			"before": ["<leader>", "a", "x"],
			"commands": ["workbench.view.extensions"]
		},

		{
			"before": ["<leader>", "b"],
			"commands": ["workbench.action.toggleSidebarVisibility"]
		},
		{
			"before": ["<leader>", "c"],
			"commands": ["editor.action.commentLine"]
			// "commands": ["workbench.action.showCommands"]
		},
		{
			"before": ["<leader>", "d"],
			"commands": ["workbench.view.debug"]
		},
		{
			"before": ["<leader>", "e"],
			"commands": ["workbench.view.explorer"]
		},
		{
			"before": ["<leader>", "f"],
			"commands": ["actions.find"]
		},
		{
			"before": ["<leader>", "n"],
			"commands": ["extension.advancedNewFile"] // needs advancedNewFile extension / (opt + cmd + n)
		},
		{
			"before": ["<leader>", "o"],
			"commands": ["workbench.action.quickOpen"]
		},
		{
			"before": ["<leader>", "."],
			"commands": ["workbench.action.quickFix"]
		},
		{
			"before": ["<leader>", "p"],
			"commands": ["workbench.action.showCommands"]
		},
		{
			"before": ["<leader>", "q"],
			"commands": ["workbench.action.closeActiveEditor"]
		},
		{
			"before": ["<leader>", "s"],
			"commands": ["workbench.view.scm"]
		},
		// {
		// 	"before": ["<leader>", "s"],
		// 	"commands": ["magit.status"]
		// },
		{
			"before": ["<leader>", "h"],
			"commands": ["workbench.action.moveEditorToLeftGroup"]
		},
		{
			"before": ["<leader>", ";"],
			"commands": ["workbench.action.moveEditorToRightGroup"]
		},
		{
			"before": ["<leader>", "m"],
			"commands": ["workbench.action.focusPreviousGroup"]
		},
		{
			"before": ["<leader>", ","],
			"commands": ["workbench.action.focusNextGroup"]
		},
		{
			"before": ["<leader>", "j"],
			"commands": ["workbench.action.previousEditorInGroup"]
		},
		{
			"before": ["<leader>", "k", "l"],
			"commands": ["editor.action.openLink"]
		},
		{
			"before": ["<leader>", "l"],
			"commands": ["workbench.action.nextEditorInGroup"]
		},
		{
			"before": ["<leader>", "m"],
			"commands": ["editor.action.toggleMinimap"]
		},
		{
			"before": ["<leader>", "x"],
			"commands": ["workbench.action.closeActiveEditor"]
		},
		// {
		// 	"before": ["<leader>", "t"],
		// 	"commands": ["workbench.action.quickOpenNavigateNextInEditorPicker"]
		// },

		{
			"before": ["<leader>", "w", "j"],
			"commands": ["workbench.action.moveActiveEditorGroupLeft"]
		},
		{
			"before": ["<leader>", "w", "l"],
			"commands": ["workbench.action.moveActiveEditorGroupRight"]
		},
		{
			"before": ["<leader>", "w", "s"],
			"commands": ["workbench.action.splitEditor"]
		},
		{
			"before": ["<leader>", "z"],
			"commands": ["workbench.action.toggleZenMode"]
		},
		{
			"before": ["<leader>", "/"],
			"after": ["<leader>", "<leader>", "/"]
			// "commands": ["editor.action.commentLine"]
		}
	],
	"vim.normalModeKeyBindingsNonRecursive": [
		{
			"before": ["="], // insert
			"after": ["i"]
		},
		{
			"before": ["I"], // insert
			"after": ["i"]
		},
		{
			"before": ["o"], // insert
			"after": ["i"]
		},
		{
			"before": ["ㅐ"], // insert
			"after": ["i"]
		},
		{
			"before": ["O"], // insert new line
			"after": ["o"]
		},
		{
			"before": ["a"], // insert beginning cursor
			"after": ["I"]
		},
		{
			"before": ["ㅁ"], // insert beginning cursor
			"after": ["I"]
		},
		{
			"before": ["i"], // up
			"after": ["k"]
		},
		{
			"before": ["ㅑ"], // up
			"after": ["k"]
		},
		{
			"before": ["k"], // down
			"after": ["j"]
		},
		{
			"before": ["j"], // left
			"after": ["h"]
		},
		{
			"before": [","], // page half down
			"after": ["<C-d>"]
		},
		{
			"before": ["m"], // page half up
			"after": ["<C-u>"]
		},
		{
			"before": ["<"], // page down
			"after": ["<C-f>"]
		},
		{
			"before": ["M"], // page up
			"after": ["<C-b>"]
		},
		{
			"before": ["h"], // beginning of line
			"after": ["^"]
		},
		{
			"before": [";"], // end of line
			"after": ["$"]
		},
		{
			"before": ["s"], // end of line
			"after": ["b"]
		},
		// not work -> use hammersppon
		// {
		// 	"before": ["<S-w>"], // surround a word
		// 	"after": ["y", "s", "i", "w"]
		// },
		{
			"before": ["<C-w>", "j"], // left window
			"after": ["<C-w>", "h"]
		},
		{
			"before": ["<S-j>"], // left window
			"commands": ["workbench.action.previousEditorInGroup"]
			// "after": ["<C-w>", "h"]
		},
		{
			"before": ["<S-l>"], // right window
			"commands": ["workbench.action.nextEditorInGroup"]
			// "after": ["<C-w>", "l"],
		}
		// {
		// 	"before": ["<TAB>"], // next window
		// 	"after": ["<C-w>", "w"]
		// }
	],
	"asciidoc.use_kroki": true,
	"asciidoc.preview.breaks": true,
	"html.format.enable": false,
	"asciidoc.enableErrorDiagnostics": false,
	"asciidoc.preview.refreshInterval": 1000,
	"asciidoc.preview.style": "boot-darkly.css"
}

{
	// Place your snippets for clojure here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"a": {
		"body": [
			"(atom $0)"
		],
		"description": "atom",
		"prefix": "a"
	},
	"ap": {
		"body": [
			"(apply $0)"
		],
		"description": "apply",
		"prefix": "ap"
	},
	"ar": {
		"body": [
			"(are [x y] (= x y)",
			"$0",
			")"
		],
		"description": "test are",
		"prefix": "ar"
	},
	"c": {
		"body": [
			"(comment",
			"  $0",
			"  :rcf)"
		],
		"description": "comment",
		"prefix": "c"
	},
	"ch": {
		"body": [
			"(chan)"
		],
		"description": "chan",
		"prefix": "ch"
	},
	"ci": {
		"body": [
			"(>! $0)"
		],
		"description": "chan in",
		"prefix": "ci"
	},
	"cn": {
		"body": [
			"(count $0)"
		],
		"description": "count",
		"prefix": "cn"
	},
	"co": {
		"body": [
			"(<! $0)"
		],
		"description": "chan out",
		"prefix": "co"
	},
	"cr": {
		"body": [
			"(comment",
			"  (run-tests)$0",
			"#_{})"
		],
		"description": "comment-run-tests",
		"prefix": "cr"
	},
	"d": {
		"body": [
			"(def $0 ",
			"     )"
		],
		"description": "def",
		"prefix": "d"
	},
	"dc": {
		"body": [
			"(defonce $0)"
		],
		"description": "defonce",
		"prefix": "dc"
	},
	"dm": {
		"body": [
			"(defmethod $0)"
		],
		"description": "defmethod",
		"prefix": "dm"
	},
	"do": {
		"body": [
			"(do $0)"
		],
		"description": "do",
		"prefix": "do"
	},
	"dr": {
		"body": [
			"@*$0"
		],
		"description": "deref",
		"prefix": "dr"
	},
	"ds": {
		"body": [
			"#_$0"
		],
		"description": "discard macro",
		"prefix": "ds"
	},
	"dss": {
		"body": [
			"#_#_$0"
		],
		"description": "discard macro",
		"prefix": "dss"
	},
	"dt": {
		"body": [
			"(deftest ${1:name}",
			"  (testing \"${2:desc}\"",
			"    (are [x y] (= x y)",
			")))"
		],
		"description": "deftest",
		"prefix": "dt"
	},
	"e": {
		"body": [
			"(= $0)"
		],
		"description": "equal",
		"prefix": "e"
	},
	"f": {
		"body": [
			"($0)"
		],
		"description": "(fucntion)",
		"prefix": "f"
	},
	"ff": {
		"body": [
			"(-> $0)"
		],
		"description": "thread-first macro",
		"prefix": "ff"
	},
	"fn": {
		"body": [
			"(fn [${2:param}] ${3:value})"
		],
		"description": "fn",
		"prefix": "fn"
	},
	"fw": {
		"body": [
			"(f/widget",
			"   :state []",
			"   :with []",
			")"
		],
		"description": "flutter widget",
		"prefix": "fw"
	},
	"gl": {
		"body": [
			"(go-loop []",
			"   $0 ",
			"  (recur))"
		],
		"description": "go loop",
		"prefix": "gl"
	},
	"go": {
		"body": [
			"(go $0)"
		],
		"description": "go",
		"prefix": "g"
	},
	"hb": {
		"body": [
			"^Boolean"
		],
		"description": "type hint Boolean",
		"prefix": "hb"
	},
	"hd": {
		"body": [
			"^Double"
		],
		"description": "type hint Double",
		"prefix": "hd"
	},
	"hi": {
		"body": [
			"^Integer"
		],
		"description": "type hint Integer",
		"prefix": "hi"
	},
	"hs": {
		"body": [
			"^String"
		],
		"description": "type hint String",
		"prefix": "hs"
	},
	"i": {
		"body": [
			"(if $0",
			"    )"
		],
		"description": "if",
		"prefix": "i"
	},
	"if": {
		"body": [
			"(if $0",
			"    )"
		],
		"description": "if",
		"prefix": "if"
	},
	"il": {
		"body": [
			"(if-let [${1:key} ${2:value}] ",
			"        ${3:true}",
			"        ${4:false})"
		],
		"description": "if-let",
		"prefix": "il"
	},
	"k": {
		"body": [
			":$1"
		],
		"description": "keyword",
		"prefix": "k"
	},
	"ks": {
		"body": [
			"{:keys [$0]}"
		],
		"description": "keys",
		"prefix": "ks"
	},
	"l": {
		"body": [
			"(let [$0] ",
			"     )"
		],
		"description": "let",
		"prefix": "l"
	},
	"ll": {
		"body": [
			"(->> $0)",
		],
		"description": "thread-last macro",
		"prefix": "ll"
	},
	"li": {
		"body": [
			"(log/info $0)"
		],
		"description": "log/info",
		"prefix": "li"
	},
	"lr": {
		"body": [
			"(defn $0 [ctx args value]",
			" ",
			")"
		],
		"description": "lacinia resolver",
		"prefix": "lr"
	},
	"m": {
		"body": [
			"(map $0)"
		],
		"description": "ma->map",
		"prefix": "ma"
	},
	"map": {
		"body": [
			"{:${1:key} ${2:value}}"
		],
		"description": "map",
		"prefix": "m"
	},
	"md": {
		"body": [
			"{:description \"$0\"}"
		],
		"description": "map-description",
		"prefix": "md"
	},
	"me": {
		"body": [
			"(merge $0)"
		],
		"description": "merge",
		"prefix": "me"
	},
	"mf": {
		"body": [
			"(map $0)"
		],
		"description": "map function",
		"prefix": "mf"
	},
	"mt": {
		"body": [
			"{:type $0}"
		],
		"description": "map-type",
		"prefix": "mt"
	},
	"mts": {
		"body": [
			"{:type String}"
		],
		"description": "map-type-string",
		"prefix": "ms"
	},
	"n": {
		"body": [
			"(defn $0 []",
			"      )"
		],
		"description": "defn",
		"prefix": "n"
	},
	"o": {
		"body": [
			"(or $0)"
		],
		"description": "lacinia resolver",
		"prefix": "o"
	},
	"p": {
		"body": [
			"($0)"
		],
		"description": "(parentheses)",
		"prefix": "p"
	},
	"pr": {
		"body": [
			"(prn $0)"
		],
		"description": "prn",
		"prefix": "pr"
	},
	"rt": {
		"body": [
			"(run-tests)$0"
		],
		"description": "run-tests",
		"prefix": "rt"
	},
	"s": {
		"body": [
			"($0)"
		],
		"description": "(S-Expression)",
		"prefix": "s"
	},
	"se": {
		"body": [
			"#{$0}"
		],
		"description": "set",
		"prefix": "se"
	},
	"tb": {
		"body": [
			":type Boolean"
		],
		"description": "type-boolean",
		"prefix": "tb"
	},
	"tf": {
		"body": [
			"(-> $0)"
		],
		"description": "threading-first",
		"prefix": "tf"
	},
	"ti": {
		"body": [
			":type Int"
		],
		"description": "type-int",
		"prefix": "ti"
	},
	"tl": {
		"body": [
			"(->>$0)"
		],
		"description": "threading-last",
		"prefix": "tl"
	},
	"ts": {
		"body": [
			":type String"
		],
		"description": "type-string",
		"prefix": "ts"
	},
	"tt": {
		"body": [
			"(testing $0",
			"  (are [x y] (= x y)",
			"))"
		],
		"description": "deftest",
		"prefix": "tt"
	},
	"up": {
		"body": [
			"(update $0)"
		],
		"description": "update",
		"prefix": "up"
	},
	"ur": {
		"body": [
			"(user/r)"
		],
		"description": "user/r, integrant 재시작시에 사용하고 있습니다.",
		"prefix": "ur"
	},
	"v": {
		"body": [
			"[$0]"
		],
		"description": "vector",
		"prefix": "v"
	},
	"w": {
		"body": [
			"(when ($0) ",
			"      )"
		],
		"description": "when",
		"prefix": "w"
	},
	"wl": {
		"body": [
			"(when-let [${1:var} ${2:value}] ",
			"          ${3:true})"
		],
		"description": "when-let",
		"prefix": "wl"
	}
}

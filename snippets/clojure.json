{
	// Place your snippets for clojure here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"a": {
		"prefix": "a",
		"body": [
			"(atom $0)"
		],
		"description": "atom"
	},
	"ar": {
		"prefix": "ar",
		"body": [
			"(are [x y] (= x y)",
			"$0",
			")"
		],
		"description": "test are"
	},
	"ap": {
		"prefix": "ap",
		"body": [
			"(apply $0)",
		],
		"description": "apply"
	},
	"c": {
		"prefix": "c",
		"body": [
			"(comment",
			"  $0",
			"  :rcf)"
		],
		"description": "comment"
	},
	"cr": {
		"prefix": "cr",
		"body": [
			"(comment",
			"  (run-tests)$0",
			"#_{})"
		],
		"description": "comment-run-tests"
	},
	"ch": {
		"prefix": "ch",
		"body": [
			"(chan)"
		],
		"description": "chan"
	},
	"co": {
		"prefix": "co",
		"body": [
			"(<! $0)"
		],
		"description": "chan out"
	},
	"ci": {
		"prefix": "ci",
		"body": [
			"(>! $0)"
		],
		"description": "chan in"
	},
	"cn": {
		"prefix": "cn",
		"body": [
			"(count $0)",
		],
		"description": "count"
	},
	"dm": {
		"prefix": "dm",
		"body": [
			"(defmethod $0)",
		],
		"description": "defmethod"
	},
	"d": {
		"prefix": "d",
		"body": [
			"(def $0 ",
			"     )"
		],
		"description": "def"
	},
	"dc": {
		"prefix": "dc",
		"body": [
			"(defonce $0)",
		],
		"description": "defonce"
	},
	"dt": {
		"prefix": "dt",
		"body": [
			"(deftest ${1:name}",
			"  (testing \"${2:desc}\"",
			"    (are [x y] (= x y)",
			")))"
		],
		"description": "deftest"
	},
	"function": {
		"prefix": "f",
		"body": [
			"($0)"
		],
		"description": "(fucntion)"
	},
	"fn": {
		"prefix": "fn",
		"body": [
			"(fn [${2:param}] ${3:value})"
		],
		"description": "fn"
	},
	"i": {
		"prefix": "i",
		"body": [
			"(if $0",
			"    )"
		],
		"description": "if"
	},
	"if": {
		"prefix": "if",
		"body": [
			"(if $0",
			"    )"
		],
		"description": "if"
	},
	"il": {
		"prefix": "il",
		"body": [
			"(if-let [${1:key} ${2:value}] ",
			"        ${3:true}",
			"        ${4:false})"
		],
		"description": "if-let"
	},
	"k": {
		"prefix": "k",
		"body": [
			":$1"
		],
		"description": "keyword"
	},
	"ur": {
		"prefix": "ur",
		"body": [
			"(user/r)"
		],
		"description": "user/r, integrant 재시작시에 사용하고 있습니다."
	},
	"tt": {
		"prefix": "tt",
		"body": [
			"(testing $0",
			"  (are [x y] (= x y)",
			"))",
		],
		"description": "deftest"
	},
	"defn": {
		"prefix": "n",
		"body": [
			"(defn $0 []",
			"      )"
		],
		"description": "defn"
	},
	"s": {
		"prefix": "s",
		"body": [
			"($0)"
		],
		"description": "(S-Expression)"
	},
	"map": {
		"prefix": "m",
		"body": [
			"{:${1:key} ${2:value}}"
		],
		"description": "map"
	},
	"se": {
		"prefix": "se",
		"body": [
			"#{$0}"
		],
		"description": "set"
	},
	"keys": {
		"prefix": "ks",
		"body": [
			"{:keys [$0]}"
		],
		"description": "keys"
	},
	"let": {
		"prefix": "l",
		"body": [
			"(let [$0] ",
			"     )"
		],
		"description": "let"
	},
	"prn": {
		"prefix": "pr",
		"body": [
			"(prn $0)"
		],
		"description": "prn"
	},
	"parentheses": {
		"prefix": "p",
		"body": [
			"($0)"
		],
		"description": "(parentheses)"
	},
	"run-tests": {
		"prefix": "rt",
		"body": [
			"(run-tests)$0",
		],
		"description": "run-tests"
	},
	"equal": {
		"prefix": "e",
		"body": [
			"(= $0)"
		],
		"description": "equal"
	},
	"threading-first": {
		"prefix": "tf",
		"body": [
			"(->$0)"
		],
		"description": "threading-first"
	},
	"threading-last": {
		"prefix": "tl",
		"body": [
			"(->>$0)"
		],
		"description": "threading-last"
	},
	"flutter widget": {
		"prefix": "fw",
		"body": [
			"(f/widget",
			"   :state []",
			"   :with []",
			")"
		],
		"description": "flutter widget"
	},
	"deref": {
		"prefix": "dr",
		"body": [
			"@*$0"
		],
		"description": "deref"
	},
	"go loop": {
		"prefix": "gl",
		"body": [
			"(go-loop []",
			"   $0 ",
			"  (recur))"
		],
		"description": "go loop"
	},
	"go": {
		"prefix": "g",
		"body": [
			"(go $0)"
		],
		"description": "go"
	},
	"type hint String": {
		"prefix": "hs",
		"body": [
			"^String"
		],
		"description": "type hint String"
	},
	"type hint Integer": {
		"prefix": "hi",
		"body": [
			"^Integer"
		],
		"description": "type hint Integer"
	},
	"type hint Double": {
		"prefix": "hd",
		"body": [
			"^Double"
		],
		"description": "type hint Double"
	},
	"type hint Boolean": {
		"prefix": "hb",
		"body": [
			"^Boolean"
		],
		"description": "type hint Boolean"
	},
	"log/info": {
		"prefix": "li",
		"body": [
			"(log/info $0)"
		],
		"description": "log/info"
	},
	"mt": {
		"prefix": "mt",
		"body": [
			"{:type $0}"
		],
		"description": "map-type"
	},
	"mts": {
		"prefix": "ms",
		"body": [
			"{:type String}"
		],
		"description": "map-type-string"
	},
	"tb": {
		"prefix": "tb",
		"body": [
			":type Boolean"
		],
		"description": "type-boolean"
	},
	"ti": {
		"prefix": "ti",
		"body": [
			":type Int"
		],
		"description": "type-int"
	},
	"ts": {
		"prefix": "ts",
		"body": [
			":type String"
		],
		"description": "type-string"
	},
	"md": {
		"prefix": "md",
		"body": [
			"{:description \"$0\"}"
		],
		"description": "map-description"
	},
	"do": {
		"prefix": "do",
		"body": [
			"(do $0)"
		],
		"description": "do"
	},
	"mf": {
		"prefix": "mf",
		"body": [
			"(map $0)"
		],
		"description": "map function"
	},
	"ds": {
		"prefix": "ds",
		"body": [
			"#_$0"
		],
		"description": "discard macro"
	},
	"dss": {
		"prefix": "dss",
		"body": [
			"#_#_$0"
		],
		"description": "discard macro"
	},
	"lr": {
		"prefix": "lr",
		"body": [
			"(defn $0 [ctx args value]",
			" ",
			")"
		],
		"description": "lacinia resolver"
	},
	"o": {
		"prefix": "o",
		"body": [
			"(or $0)"
		],
		"description": "lacinia resolver"
	},
	"ma->map": {
		"prefix": "ma",
		"body": [
			"(map $0)",
		],
		"description": "ma->map"
	},
	"merge": {
		"prefix": "me",
		"body": [
			"(merge $0)",
		],
		"description": "merge"
	},
	"update": {
		"prefix": "up",
		"body": [
			"(update $0)",
		],
		"description": "update"
	},
	"vector": {
		"prefix": "v",
		"body": [
			"[$0]"
		],
		"description": "vector"
	},
	"when": {
		"prefix": "w",
		"body": [
			"(when ($0) ",
			"      )"
		],
		"description": "when"
	},
	"when-let": {
		"prefix": "wl",
		"body": [
			"(when-let [${1:var} ${2:value}] ",
			"          ${3:true})"
		],
		"description": "when-let"
	},
}

{
	// Place your snippets for clojure here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"user/r": {
		"prefix": "ur",
		"body": [
			"(user/r)"
		],
		"description": "user/r, integrant 재시작시에 사용하고 있습니다."
	},
	"def": {
		"prefix": "d",
		"body": [
			"(def $0 ",
			"     )"
		],
		"description": "def"
	},
	"deftest": {
		"prefix": "dt",
		"body": [
			"(deftest ${1:name}",
			"  (testing \"${2:desc}\"",
			"))"
		],
		"description": "deftest"
	},
	"defn": {
		"prefix": "n",
		"body": [
			"(defn $0 []",
			"      )"
		],
		"description": "defn"
	},
	"function": {
		"prefix": "f",
		"body": [
			"($0)"
		],
		"description": "(fucntion)"
	},
	"fn": {
		"prefix": "fn",
		"body": [
			"(fn [${2:param}] ${3:value})"
		],
		"description": "fn"
	},
	"keyword": {
		"prefix": "k",
		"body": [
			":$1"
		],
		"description": "keyword"
	},
	"vector": {
		"prefix": "v",
		"body": [
			"[$0]"
		],
		"description": "vector"
	},
	"map": {
		"prefix": "m",
		"body": [
			"{:${1:key} ${2:value}}"
		],
		"description": "map"
	},
	"set": {
		"prefix": "s",
		"body": [
			"#{$0}"
		],
		"description": "set"
	},
	"keys": {
		"prefix": "ks",
		"body": [
			"{:keys [${1:key}] :as ${2:param}}"
		],
		"description": "keys"
	},
	"if": {
		"prefix": "i",
		"body": [
			"(if ${1:condition}",
			"    ${2:true}",
			"    ${3:false})"
		],
		"description": "if"
	},
	"if-let": {
		"prefix": "il",
		"body": [
			"(if-let [${1:key} ${2:value}] ",
			"        ${3:true}",
			"        ${4:false})"
		],
		"description": "if-let"
	},
	"when": {
		"prefix": "w",
		"body": [
			"(when ($0) ",
			"      )"
		],
		"description": "when"
	},
	"when-let": {
		"prefix": "wl",
		"body": [
			"(when-let [${1:var} ${2:value}] ",
			"          ${3:true})"
		],
		"description": "when-let"
	},
	"let": {
		"prefix": "l",
		"body": [
			"(let [$0] ",
			"     )"
		],
		"description": "let"
	},
	"prn": {
		"prefix": "pr",
		"body": [
			"(prn $0)"
		],
		"description": "prn"
	},
	"parentheses": {
		"prefix": "p",
		"body": [
			"($0)"
		],
		"description": "(parentheses)"
	},
	"comment": {
		"prefix": "c",
		"body": [
			"(comment",
			"  $0",
			"#_{})"
		],
		"description": "comment"
	},
	"comment-run-tests": {
		"prefix": "cr",
		"body": [
			"(comment",
			"  (run-tests)$0",
			"#_{})"
		],
		"description": "comment-run-tests"
	},
	"atom": {
		"prefix": "a",
		"body": [
			"(atom $0)"
		],
		"description": "atom"
	},
	"equal": {
		"prefix": "e",
		"body": [
			"(= ${1:first} ${2:second})"
		],
		"description": "equal"
	},
	"threading-first": {
		"prefix": "tf",
		"body": [
			"(->$0)"
		],
		"description": "threading-first"
	},
	"threading-last": {
		"prefix": "tl",
		"body": [
			"(->>$0)"
		],
		"description": "threading-last"
	},
	"flutter widget": {
		"prefix": "fw",
		"body": [
			"(f/widget",
			"   :state []",
			"   :with []",
			")"
		],
		"description": "flutter widget"
	},
	"deref": {
		"prefix": "dr",
		"body": [
			"@*$0"
		],
		"description": "deref"
	},
	"chan out": {
		"prefix": "co",
		"body": [
			"(<! $0)"
		],
		"description": "chan out"
	},
	"chan in": {
		"prefix": "ci",
		"body": [
			"(>! $0)"
		],
		"description": "chan in"
	},
	"go loop": {
		"prefix": "gl",
		"body": [
			"(go-loop []",
			"   $0 ",
			"  (recur))"
		],
		"description": "go loop"
	},
	"chan": {
		"prefix": "ch",
		"body": [
			"(chan)"
		],
		"description": "chan"
	},
	"go": {
		"prefix": "g",
		"body": [
			"(go $0)"
		],
		"description": "go"
	},
}